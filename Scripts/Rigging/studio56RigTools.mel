global proc studio56RigTools()
{

	if((`window -ex RigWindow`)== true)
	deleteUI RigWindow;
	string $window = `window -title "p3Drig Tools"  -h 1000 -w 400 -s 1 -rtf 1 -bgc 0.247 0.247 0.247 -menuBar true RigWindow`;
	menu -label "File" -to on;
			menuItem  -label "About" -c "About";
			menuItem -l "Help";
			menuItem -d on;
			menuItem   -label "Exit" -c "deleteUI RigWindow;";
	string $tab = `tabLayout -imw 100 `;

	string $tab1 = `columnLayout`;
		Rigset;
		setParent $tab;
	string $tab2 = `columnLayout`;
		Spine;
		setParent $tab;
	string $tab3 = `columnLayout`;
		Tail;
		setParent $tab;
	string $tab4 = `columnLayout`;
		ear_L;
		setParent $tab;
	string $tab5 = `columnLayout`;
		ear_R;
		setParent $tab;
	string $tab6 = `columnLayout`;
		facial;
		setParent $tab;
	string $tab7 = `columnLayout`;
		finger;
		setParent $tab;
	string $tab8 = `columnLayout`;
		toony;
		setParent $tab;
	string $tab9 = `columnLayout`;
		VisControl;
		setParent $tab;
    string $tab10 = `columnLayout`;
		creaturerig;
		setParent $tab;


	tabLayout  -e  -tl $tab1 "Basic RIG"  -tl $tab2 "Spine" -tl $tab3 "Tail"  -tl $tab4 "Ear_L"  -tl $tab5 "Ear_R" -tl $tab6 "Facial" -tl $tab7 "Finger" -tl $tab8 "Toony" -tl $tab9 "Finishing" -tl $tab10 "creatureRig"  $tab ;

showWindow RigWindow;
}
global proc visibilityOFF()
{
	string $sel[] = `ls -sl`;
	for ($selection in $sel)
	{
	setAttr ($selection + ".lodVisibility") 0;
	setAttr ($selection + ".visibility") 0;

	}
}
global proc shapeNodevisibilityOFF()
{
	string $sel[] = `ls -s`;
	for ($selection in $sel)
	{
	setAttr ($selection + ".lodVisibility") 0;
	setAttr ($selection + ".visibility") 0;

	}
}
global proc visibilityON()
{
	string $sel[] = `ls -sl`;
	for ($selection in $sel)
	{
	setAttr ($selection + ".lodVisibility") 1;
	setAttr ($selection + ".visibility") 1;

	}
}
global proc shapeNodevisibilityON()
{
	string $sel[] = `ls -s`;
	for ($selection in $sel)
	{
	setAttr ($selection + ".lodVisibility") 1;
	setAttr ($selection + ".visibility") 1;
}
}
global proc pivotON()
{
	string $sel[] = `ls -sl `;
	for ($selection in $sel)
	{
	setAttr ($selection + ".displayRotatePivot") 1;
	}
}
global proc pivotOFF()
{
	string $sel[] = `ls -sl`;
	for ($selection in $sel)
	{
	setAttr ($selection + ".displayRotatePivot") 0;
	}
}
global proc lockONT()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
      setAttr -l true ($selection + ".translate");
    }
}
global proc lockOFFT()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
      setAttr -l false ($selection + ".translate");
    }
}
global proc lockONR()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
      setAttr -l true ($selection + ".rotate");
    }
}
global proc lockOFFR()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
      setAttr -l false ($selection + ".rotate");
    }
}
global proc lockONS()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
      setAttr -l true ($selection + ".scale");
    }
}
global proc lockOFFS()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
      setAttr -l false ($selection + ".scale");
    }
}
global proc lockONV()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
      setAttr -l true ($selection + ".v");
    }
}
global proc lockOFFV()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
      setAttr -l false ($selection + ".v");
    }
}
global proc displayMode()
{

		string $sel[] = `ls -sl`;
		for ($selection in $sel)
		{

			setAttr ($selection + ".overrideEnabled") 1;
			if(`radioButtonGrp -q -sl displayMode` == 1)

					setAttr ($selection +".overrideDisplayType") 0;

			if(`radioButtonGrp -q -sl displayMode` == 2)

					setAttr ($selection+".overrideDisplayType") 1;

			if(`radioButtonGrp -q -sl displayMode` == 3)

					setAttr ($selection+".overrideDisplayType") 2;
		}
}
global proc matchTool()
{
		string $sel[] = `ls -sl`;
		for ($selection in $sel)
		{


			if(`radioButtonGrp -q -sl matchObject` == 1)

				{
					string $transition[]=`pointConstraint $sel[1] $sel[0]`;
					string $findPtCns[] = `listRelatives -type pointConstraint $sel[0]`;
					select $findPtCns;
					doDelete;
				}


			if(`radioButtonGrp -q -sl matchObject` == 2)

				{
					string $transition[]=`orientConstraint $sel[1] $sel[0]`;
					string $findPtCns[] = `listRelatives -type orientConstraint $sel[0]`;
					select $findPtCns;
					doDelete;
				}


			if(`radioButtonGrp -q -sl matchObject` == 3)
				{
					string $transition[]=`parentConstraint $sel[1] $sel[0]`;
					string $findPtCns[] = `listRelatives -type parentConstraint $sel[0]`;
					select $findPtCns;
					doDelete;
				}

		}
}

global proc About()
{
	if ((`window -exists Aboutwin`)==true)
	deleteUI Aboutwin;
	string $window =`window -t "About"  -s 0 -h 100 -w 200 Aboutwin`;
	columnLayout ;
	image -i "E:/Scripts/Animation/STUDIO56.jpg";
	text  -l "designed by p3Drigs" ;
	showWindow Aboutwin;
}

global proc Rigset()
{
	columnLayout -adj true;
	separator  -style "in";
	separator  -style "in";
	text  -l "p3Drig Tools" -fn "boldLabelFont" -h 30 -bgc 0.627 0.412 0.188;
	columnLayout -adj on pivot ;
	separator  -style "in";
	separator -st "in";
	text -l " Show Pivot" -fn  "boldLabelFont" -h 20 ;
	//separator -st "in";
	//separator -st "in";
	rowLayout -nc 4;
	checkBox  -label "Show Pivot" -h 20 -w 150 -onc "pivotON" -ofc "pivotOFF" -v 0;
	setParent -u;
	setParent..;

	columnLayout -adj on visibility;
	separator -st "in";
	//separator -st "in";
	text -l " Visibility ON/OFF" -fn  "boldLabelFont" -h 20 ;
	//separator -st "in";
	//separator -st "in";
	rowLayout -nc 4;
	checkBox  -label "Both LOD and Visibilty" - h 20 -w 150 -onc "visibilityON" -ofc "visibilityOFF" -v 1;
	checkBox -label "ShapeNode Visibility / LOD" -h 20 -w 150 -onc "shapeNodevisibilityON" -ofc "shapeNodevisibilityOFF" -v 1;
	setParent -u;
	setParent..;

    columnLayout -adj on lock;
    separator -st "in";
    text -l "Lock ON/OFF" -fn "boldLabelFont" -h 20;
    //separator -st "in";
    rowColumnLayout -nc 4 ;
    checkBox -l "Translate" -h 20 -onc "lockONT" -ofc "lockOFFT" -v 0;
    checkBox -l "Rotate" -h 20 -onc "lockONR" -ofc "lockOFFR" -v 0;
    checkBox -l "Scale" -h 20 -onc "lockONS" -ofc "lockOFFS" -v 0;
    checkBox -l "Visibility" -h 20 -onc "lockONV" -ofc "lockOFFV" -v 0;
    setParent -u;
	setParent..;

	columnLayout -adj on displaymode;
    separator -st "in";
    text -l "DisplayMode ON/OFF" -fn "boldLabelFont" -h 20;
    //separator -st "in";
    rowColumnLayout -nc 3 ;
    radioButtonGrp  -nrb 3 -la3 "Normal" "Template" "Reference" -select 1 displayMode ;
    setParent..;
    rowColumnLayout -nc 2;
    button -w 100 -vis 0;
    button -al "center" -h 30 -w 100 -l "confirm" -c "displayMode" -bgc .5 .5 0;
    setParent -u;
	setParent..;

	columnLayout -adj on matchObjects;
    separator -st "in";
    text -l "Match Alignment" -fn "boldLabelFont" -h 20;
    //separator -st "in";
    rowColumnLayout -nc 3 ;
    radioButtonGrp  -nrb 3 -la3 "Translation" "Rotation" "Both" -select 1 matchObject ;
    setParent..;
    rowColumnLayout -nc 2;
    button -w 100 -vis 0;
    button -al "center" -h 30 -w 100 -l "Match" -c "matchTool" -bgc .0 .3 .5;
    setParent -u;
	setParent..;

	columnLayout -adj on Editors;
	separator -st "in";
	//separator -st "double";
	text -l " Editors" -fn  "boldLabelFont" -h 20;
	//separator -st "in";
	//separator -st "double";
	rowColumnLayout -nc 2 ;
	button  -al "center" -label "HyperShade" -h 40 -w 150 -c "HypershadeWindow"  -bgc 1 .6 .0;
	button -al "center" -label "NodeEditor" -w 150 -c "NodeEditorWindow" -h 40 -bgc 1 .6 .0;
	button -al "center" -label "ConnectionEditor" -h 40 -w 150 -c "ConnectionEditor" -bgc 1 .6 .0;
	button -al "center" -label "Outliner" -w 150 -c "OutlinerWindow" -h 40 -bgc 1 .6 .0;
	button -al "center" -label "GraphEditor" -w 150 -c "GraphEditor" -h 40 -bgc 1 .6 .0;
	button -al "center" -label "ComponentEditor" -h 40 -w 150 -c "ComponentEditor" -bgc 1 .6 .0;
}



global proc Tail()

{

    columnLayout;
    text " ";
    text -h 20 "Step 1 :Create joints and curve(IK)" ;
    button  -h 50 -w 300 -label "Add Tail Dynamics Setting To Rig"   -command "ADD_tail"  -bgc 0.5 0.5 0.0 addmatch;
    text "Do the placing and parenting process,Carefully" ;
    text -h 20 "Step 2: After arranging the hairSystems U position DO freeze";
    button  -h 50 -w 300 -label "Freeze tailJoint_Skin"  -command "freeze_tail"-bgc 1 1 1  ;
    text " ";
    text -h 20 "Step 3: Skin the NurbsSurface with the IK joints";
    button  -h 50 -w 300 -label "Bind Surf" -command "bindsurf_tail"-bgc .1 .1 .5  ;
    text "Rename the FK control Topology to Tail_FK ";
    text -h 20 "Step 4: Apply Dynamics Setting to the Ear ";
    button  -h 50 -w 300 -label "Apply Dynamics"   -command "dynamics_tail"-bgc .3 .3 .5  ;
    text "Finish It!!! u have applied the Dynamics to Tail";
    text -h 20 "Step 5: Clean You Outliner Please...";
    button  -h 50 -w 300 -l "Clean Outliner" -c "clearOutlinerTail" -bgc 1 1 1;
    setParent..;
    text " ";
    columnLayout -adj true;
    separator -st "in";
    text  "Note: fk controls should be parented(parent -s -r) to joints";
    text "and corrects its orientation & ik controls parented to joints as ";
    text "same method.And match the position using contraint and  ";
    text " parent to offset grp";

       string $ex = ("tailJoint_IK*");
    if (`objExists  $ex`)
    {
        button -edit -en 0 -l "Tail Settings are done" addmatch;
    }
}



//add initial setting to Tail


global proc ADD_tail ()

{
     string $ex = ("tailJoint_IK*");
    if (`objExists  $ex`)
    {
        button -edit -en 0 -l "Tail Settings are done" addmatch;
    }
    string $selection_joint[]= `ls -transforms "joint*"`;
    int $counterjoint=  (size($selection_joint));
    for($a=1;$a<=$counterjoint;$a++)
    {
        rename ("joint"+ $a )("tailJoint_IK"+ $a);
    }
    select -r curve1;
    move -r -os -wd -.1 0 0 ;
    duplicate -rr;
    move -r -os -wd .2 0 0 ;
    select -r curve1 curve2 ;
    loft -ch 1 -u 1 -c 0 -ar 1 -d 3 -ss 1 -rn 0 -po 0 -rsn true "curve1" "curve2";
    select -r curve2 ;
    doDelete;
    select -r curve1 ;
    rename "curve1" "tailspinecurve";
    move -r -os -wd .1 0 0 ;
    select -r loftedSurface1 ;
    rename "loftedSurface1" "tailsurf";
    createHair $counterjoint 1 18 0 0 0 0 5 0 1 1 1;
    delete pfxHair1;
    searchReplaceNames "hairSystem1" "tailhairsystem" "all";
    delete "tailhairsystem";
  for ($i=1;$i<=$counterjoint;$i++)
    {
        joint -p 0 0 0 -n "tailJoint_Skin1" ;
    }
    select -r "tailJoint_Skin*";
    parent -w;
    select -r "tailJoint_IK*";
    duplicate -rr;
    searchReplaceNames "tailJoint_IK*" "tailJoint_FK" "selected";
    //select -r "joint*";
   // searchReplaceNames "joint" "tailJoint_Skin" "hierarchy";

    select -r tailspinecurve;
    makeCurvesDynamicHairs 1 0 1;
    searchReplaceNames "hairSystem1" "tailhairsystem_DYN" "all";
    rename "follicle1""tailHair_follicle";
    setAttr "tailHair_follicleShape.pointLock" 1;
    select -cl;
    string $selection[]= `ls -transforms "tailJoint_IK*"`;
    int $counter=  (size($selection));
    CreateLocator;
    rename "locator1""tail_loc";
    $loc_pos=`xform  -q -t -ws ("tailJoint_IK"+$counter)`;
    move -ws $loc_pos[0] $loc_pos[1] $loc_pos[2] "tail_loc";
    select -r ("tailJoint_FK"+$counter) tail_loc;
    doCreatePointConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };


  for ($i=0;$i<=($counter/2);$i++)
    {

        group -n Tail_IK_offset -em;
        group -n Tail_FK_offset -em;
        curve -d 1 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -n "Tail_IK" ;
        xform -cp;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
        joint -p 0 0 0 -n "tail_IK"  ;
        curve -d 1 -p 0.520619 0 1.99259e-005 -p 0.368133 0.368133 1.99259e-005 -p 0 0.520619 1.99259e-005 -p -0.368133 0.368133 1.99259e-005 -p -0.520619 0 1.99259e-005 -p -0.368133 -0.368133 1.99259e-005 -p 0 -0.520619 1.99259e-005 -p 0.368133 -0.368133 1.99259e-005 -p 0.520619 0 1.99259e-005 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -n "Tail_FK" ;

    }
    select -cl;
    select -r "tail_IK*";
    parent -w;


};


global proc connect_tail()

{
    parent;
}


global proc freeze_tail()

{
    string $selection_joint[]= `ls -transforms "tailJoint_Skin*"`;
    int $counterjoint=  (size($selection_joint));
    for($a=1;$a<=$counterjoint;$a++)
    {
        setAttr ("tailJoint_Skin"+ $a +".rotateX")0;
        setAttr ("tailJoint_Skin"+ $a +".rotateY")0;
        setAttr ("tailJoint_Skin"+ $a +".rotateZ")0;
        setAttr ("tailJoint_Skin"+ $a +".translateX")0;
        setAttr ("tailJoint_Skin"+ $a +".translateY")0;
        setAttr ("tailJoint_Skin"+ $a +".translateZ")0;
    }
};

global proc bindsurf_tail()
{
    select -r "tail_IK*""tailsurf";
    performSkinCluster true;

};


global proc dynamics_tail()
{

   select -r Tail_FK;
   addAttr -ln "DynamicsSettings"  -at long  Tail_FK;
   setAttr -e-channelBox true Tail_FK.DynamicsSettings;
   addAttr -ln "Simulations"  -at long  -min 0 -max 1 -dv 0 Tail_FK;
   setAttr -e-keyable true Tail_FK.Simulations;
   addAttr -ln "Stiffness"  -at double  -min -1 -max 1 -dv 0 Tail_FK;
   setAttr -e-keyable true Tail_FK.Stiffness 0.3;
   addAttr -ln "Iterations"  -at double  Tail_FK;
   setAttr -e-keyable true Tail_FK.Iterations 30;
   addAttr -ln "Attraction"  -at double  Tail_FK;
   setAttr -e-keyable true Tail_FK.Attraction .3;
   addAttr -ln "Damping"  -at double  Tail_FK;
   setAttr -e-keyable true Tail_FK.Damping 0.2;
   addAttr -ln "StartFrame"  -at long  Tail_FK;
   setAttr -e-keyable true Tail_FK.StartFrame 1;
   connectAttr -f Tail_FK.Stiffness tailhairsystem_DYNShape.stiffness;
   connectAttr -f Tail_FK.Iterations tailhairsystem_DYNShape.iterations;
   connectAttr -f Tail_FK.Attraction tailhairsystem_DYNShape.startCurveAttract;
   connectAttr -f Tail_FK.Damping tailhairsystem_DYNShape.damp;
   connectAttr -f Tail_FK.StartFrame tailhairsystem_DYNShape.startFrame;
   setDrivenKeyframe -currentDriver Tail_FK.Simulations tailhairsystem_DYNShape.simulationMethod;
   setAttr "Tail_FK.Simulations" 0;
   setAttr "tailhairsystem_DYNShape.simulationMethod" 1;
   setDrivenKeyframe -currentDriver Tail_FK.Simulations tailhairsystem_DYNShape.simulationMethod;
   setAttr "Tail_FK.Simulations" 1;
   setAttr "tailhairsystem_DYNShape.simulationMethod" 3;
   setDrivenKeyframe -currentDriver Tail_FK.Simulations tailhairsystem_DYNShape.simulationMethod;
   group -n TailDynamics_Grp -em;
   setAttr "tailhairsystemFollicles.visibility" 0;
   select -r tailhairsystem_DYN ;
   channelBoxCommand -break;
   CBdeleteConnection "tailhairsystem_DYNShape.cti";
expression -s "\nif(frame!= tailhairsystem_DYNShape.startFrame)\ntailhairsystem_DYNShape.currentTime = tailhairsystem_DYNShape.currentTime + 1 + tail_loc.translateX - tail_loc.translateX + tail_loc.translateY - tail_loc.translateY + tail_loc.translateZ - tail_loc.translateZ + .I[4] - .I[4] + .I[5] - .I[5] + .I[6] - .I[6]+ .I[7] - .I[7]+ .I[8] - .I[8]+ .I[9] - .I[9]+ .I[10] - .I[10];\nelse\n\ttailhairsystem_DYNShape.currentTime = tailhairsystem_DYNShape.startFrame;"  -o loopSplit1 -n "Tail_Dynamics" -ae 1 -uc all ;

};

global proc clearOutlinerTail()
{
	select -r "Tail_FK_offset"  "tailJoint_IK1";
	group; xform -os -piv 0 0 0;
	rename "group1" "Tail_Dynamics_Jnt";
	select -r "Tail_Dynamics_Jnt" "Body";
	parent;
	select -r Tail_IK ;
	select -r tailsurf tailhairsystemFollicles tailhairsystem_DYN tailhairsystem_DYNFollicles tailhairsystem_DYNOutputCurves tail_loc Tail_IK TailDynamics_Grp ;
	parent;
}




// add initial setting for spine




global proc Spine()
{
    columnLayout -adj true;
    separator -st "in";
    //text" ";
    text"Before starting u have to make the jointSetup for the spine";
    text"create curve along through the joints and apply curveinfo node";
    text"then find the curvelength value.";
    separator -st "in";
    columnLayout;
    text "Step 1: Type the curvelength value here ";
    floatFieldGrp  -cw2 80 80 -l "CurveInfo Value" curveval;
    //text " ";
    text "Step 2:  ";
    button -h 40 -w 300 -label "Add Squash Setting To Rig" -command "Add_spine"  -bgc 0.5 0.5 0.0 addmatch;
    text " ";
    text "Step 3: Connect Sqaush and Stretch Nodes to Spine ";
    button -h 40 -w 300 -label "connect to spine" -command "connect_spine"-bgc 0.5 0.5 1 ;
    text "Sqaush and Stretch are connected to spine!!!";
    text  " ";
    text "Step 4: Type how many controls curves U want in Spine ";
    intFieldGrp -cw2 95 80 -l "ControlJoints count" cntrljnt;
    text " ";
    text "Step 5: create the control curves ";
    button -h 40 -w 300 -label "ControlCurve" -command "controlcurve_spine"-bgc 0.5 0.5 .5 ;
    text " ";
    text "Step 6: create the control curves ";
    button -h 40 -w 300 -label "Clean Outliner" -command "clearOutlinerSpine"-bgc 1 1 1 ;
    text " ";
    columnLayout -adj true;
    separator -st "in";
    columnLayout;
    text "Step 7: Apply breath to the chest,first u connect ";text "             breathconnect attribute to breath blendshape";
    button -h 40 -w 300 -label "Breath Control to Chest" -command "Breath_spine"-bgc 0.1 0.5 .1 ;

     string $ex = ("Spine_SknJnt*");
    if (`objExists  $ex`)
    {
        button -edit -en 0 -l "Squash Settings are done" addmatch;
    }


}



global proc Add_spine()

{
    string $ex = ("Spine_SknJnt*");
    if (`objExists  $ex`)
    {
        button -edit -en 0 -l "Squash Settings are done" addmatch;
    }
    string $selection_joint[]= `ls -transforms "joint*"`;
    int $counterjoint=  (size($selection_joint));
    for($a=1;$a<=$counterjoint;$a++){


        rename ("joint"+ $a )("Spine_SknJnt"+ $a);

    }
    rename "Main" "Placer";
    select -r curve1;

    rename "curve1" "spineIKCurve";
    addAttr -ln "Stretch_Switch"  -at double  -min 0 -max 1 -dv 1 Body;
    addAttr -ln "Squash_Val"  -at double  -min 0 -max 1 -dv 0.5 Body;
    addAttr -ln "Back_Stretch"  -at double  -min 1 -max 15 -dv 0 Body;
    addAttr -ln "RigScale"  -at double  -min 1 -max 15 -dv 1 Placer;
    connectAttr -f Placer.RigScale Placer.scaleX;
    connectAttr -f Placer.RigScale Placer.scaleY;
    connectAttr -f Placer.RigScale Placer.scaleZ;
    string $selection_spinejoint[]= `ls -transforms "Spine_SknJnt*"`;
    int $counter=  (size($selection_spinejoint));

    for($a=1;$a<$counter;$a++){
        createNode frameCache;
        int$i;
        string $MULDIV= `createNode multiplyDivide` ;
        setAttr ($MULDIV+".operation") 3;
        connectAttr Body.Back_Stretch ("frameCache*"+".stream");
        connectAttr ("frameCache*"+".varying") ("multiplyDivide*"+".input2X");

    }


	select -r "frameCache*";
    searchReplaceNames "frameCache" "SpineSquash_FC" "selected";
    select -r "multiplyDivide*";
    searchReplaceNames "multiplyDivide" "SpineMulDiv_POWER" "selected";
    createNode reverse;
    rename  "reverse1" "SpineSquashVal_REV";
    connectAttr Body.Squash_Val SpineSquashVal_REV.inputX;
    createNode pairBlend;
    rename  "pairBlend1" "SpineSquashVal_PB";
    for($i=1;$i<4;$i++)
    {
        string $MULDIV= `createNode multiplyDivide` ;
        setAttr($MULDIV+".operation")2;
    }
    rename "multiplyDivide1""SpineSquashVal_DIV";
    rename "multiplyDivide2""SpineSquashStretch_DIV";
    rename "multiplyDivide3""SpineSquashScale_DIV";
    createNode pairBlend;
    rename  "pairBlend1" "SpineSquashSwitch_PB";
    connectAttr SpineSquashVal_REV.outputX SpineSquashVal_PB.weight;
    connectAttr SpineSquashVal_PB.outTranslateY SpineSquashVal_DIV.input2Y;
    connectAttr Spine_SknJnt1.scaleX SpineSquashVal_PB.inTranslateY1;
    connectAttr Body.Stretch_Switch SpineSquashSwitch_PB.weight;
    connectAttr SpineSquashSwitch_PB.outTranslateX SpineSquashStretch_DIV.input1X;
    connectAttr SpineSquashStretch_DIV.outputX SpineSquashScale_DIV.input1X;
    connectAttr curveInfo1.arcLength SpineSquashSwitch_PB.inTranslateX2;
    connectAttr Placer.RigScale SpineSquashScale_DIV.input2X;
    setAttr "SpineSquashVal_DIV.input1Y" 1;
    $ns=`floatFieldGrp   -q -v1 curveval` ;
    setAttr "SpineSquashStretch_DIV.input2X" $ns;


};




global proc connect_spine()

{


    string $selection_spinejoint[]= `ls -transforms "Spine_SknJnt*"`;
    int $counter=  (size($selection_spinejoint));
    for($a=1;$a<$counter;$a++){

        connectAttr SpineSquashScale_DIV.outputX ("Spine_SknJnt"+ $a +".scaleX");
        connectAttr SpineSquashVal_DIV.outputY  ("SpineMulDiv_POWER"+ $a + ".input1X");
        connectAttr ("SpineMulDiv_POWER" + $a + ".outputX")("Spine_SknJnt"+ $a +".scaleZ");
        connectAttr ("SpineMulDiv_POWER" + $a + ".outputX")("Spine_SknJnt"+ $a +".scaleY");
    }



 };



global proc controlcurve_spine()
{

    $cntljn=`intFieldGrp -q -v1 cntrljnt`;
    print $cntljn;
    for($i=1;$i<=$cntljn;$i++)
    {
    group -em -n "Bend_Spine_offset";
    curve -d 1 -p 3.162278 -1.63595e-009 3.162278 -p 0 -1.63595e-009 4.472136 -p -3.162277 -1.63595e-009 3.162277 -p -4.472136 -1.63595e-009 0 -p -3.162277 -1.63595e-009 -3.162277 -p 0 -1.63595e-009 -4.472136 -p 3.162277 -1.63595e-009 -3.162277 -p 4.472136 -1.63595e-009 0 -p 3.162278 -1.63595e-009 3.162278 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -n "Bend_Spine";
    joint -p 0 0 0 -n "SpineJoint_Skin";
    }
    select -r "SpineJoint_Skin*";
    parent -w;


};



global proc Breath_spine()

{
   select -r "Chest";
   addAttr -ln "Breath_Setting"  -at long  Chest;
   setAttr -e-channelBox true -k on Chest.Breath_Setting;
   addAttr -ln "Breath"  -at long  -min 0 -max 1 -dv 0 Chest;
   setAttr -e-keyable true -k on Chest.Breath;
   addAttr -ln "Breath_Frequency"  -at double  -min -10 -max 10 -dv 0 Chest;
   setAttr -e-keyable true -k on Chest.Breath_Frequency 0;
   addAttr -ln "Breath_Speed"  -at double  Chest;
   setAttr -e-keyable true -k on Chest.Breath_Speed 0;
   addAttr -ln "Breath_Connected"  -at double  Chest;
   setAttr -e-keyable true -k on Chest.Breath_Connected 0;
   addAttr -ln "StartFrame"  -at long  Chest;
   setAttr -e-keyable true  -k on Chest.StartFrame 1;



}

global proc clearOutlinerSpine()
{

	rename ikHandle1 Spine_IK;
	parent Spine_SknJnt1 Root_M ;
	select -r spineIKCurve ;
	select -add Spine_IK ;
	group; xform -os -piv 0 0 0;
	rename "group1" "NoneScale";
	setAttr -l on  "NoneScale.visibility" 0  ;


  	//Advanced Twist setting
   	string $selection_spinejoint[]= `ls -transforms "Spine_SknJnt*"`;
    int $counter=  (size($selection_spinejoint));
    //print $counter;
    string $lastjoint = "Spine_SknJnt" + $counter;
    string $firstjoint = "Spine_SknJnt"+"1";
    // print $lastjoint;
    //print $firstjoint;
  	spaceLocator -p 0 0 0;
	spaceLocator -p 0 0 0;
	select -r $lastjoint ;
	select -add locator2 ;
	doCreatePointConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
	pointConstraint -offset 0 0 0 -weight 1;
	select -r locator2_pointConstraint1 ;
	doDelete;
	select -r $firstjoint ;
	select -add locator1 ;
	doCreatePointConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
	pointConstraint -offset 0 0 0 -weight 1;
	select -r locator1_pointConstraint1 ;
	doDelete;
	rename locator1 SpineChestTwist_loc;
	rename locator2 SpineHipTwist_loc;
	parent SpineChestTwist_loc Chest ;
	parent  SpineHipTwist_loc Hip;
	setAttr " SpineHipTwist_loc.visibility" 0;
	setAttr "SpineChestTwist_loc.visibility" 0;

	setAttr "Spine_IK.dTwistControlEnable" 1;
	setAttr "Spine_IK.dWorldUpType" 4;
	setAttr "Spine_IK.dWorldUpAxis" 0;

//clear outline while finishing spine.
	select -r Placer ;
	group -n "Rig"; xform -os -piv 0 0 0 ;
	parent NoneScale Rig ;


}




// add initial setting for Ear_L







global proc ear_L()
{

    columnLayout ;
    text " ";
    text -h 20 "Step 1 :Create joints and curve(IK)" ;
    button -h 50 -w 300 -label "Add Left Ear Dynamics Setting To Rig" -command "ADD_ear_L"  -bgc 0.5 0.5 0.0 addmatch;
    text "Do the placing and parenting process,Carefully" ;
    text -h 20 "Step 2: After arranging the hairSystems U position DO freeze";
    button -h 50 -w 300 -label "Freeze ear_LJoint_Skin" -command "freeze_ear_L"-bgc .5 1 .5  ;
    text " ";
    text -h 20 "Step 3: Skin the NurbsSurface with the IK joints";
    button -h 50 -w 300 -label "Bind Surf" -command "bindsurf_ear_L"-bgc .1 .1 .5  ;
    text "Rename the FK control Topology to Ear_FK ";
    text -h 20 "Step 4: Apply Dynamics Setting to the Ear ";
    button -h 50 -w 300 -label "Apply Dynamics" -command "dynamics_ear_L"-bgc .3 .3 .5  ;
    text "Finish It!!! u have applied the Dynamics to Left Ear";
    text -h 20 "Step 5: Clean You Outliner Please...";
    button  -h 50 -w 300 -l "Clean Outliner" -c "clearOutlinerEar_L" -bgc 1 1 1;
    setParent..;
    text " ";
    columnLayout -adj true;
    separator -st "in";
    text  "Note: fk controls should be parented(parent -s -r) to joints";
    text "and corrects its orientation & ik controls parented to joints as ";
    text "same method.And match the position using contraint and  ";
    text " parent to offset grp";

         string $ex = ("ear_LJoint_IK*");
    if (`objExists  $ex`)
    {
        button -edit -en 0 -l "Ear_L Settings are done" addmatch;
    }


}

//add initial setting


global proc ADD_ear_L ()

{
     string $ex = ("ear_LJoint_IK*");
    if (`objExists  $ex`)
    {
        button -edit -en 0 -l "Ear_L Settings are done" addmatch;
    }
    string $selection_joint[]= `ls -transforms "joint*"`;
    int $counterjoint=  (size($selection_joint));
  for($a=1;$a<=$counterjoint;$a++)
    {
        rename ("joint"+ $a )("ear_LJoint_IK"+ $a);
    }
    select -r curve1;
    move -r -os -wd -.1 0 0 ;
    duplicate -rr;
    move -r -os -wd .2 0 0 ;
    select -r curve1 curve2 ;
    loft -ch 1 -u 1 -c 0 -ar 1 -d 3 -ss 1 -rn 0 -po 0 -rsn true "curve1" "curve2";
    select -r curve2 ;
    doDelete;
    select -r curve1 ;
    rename "curve1" "ear_Lspinecurve";
    move -r -os -wd .1 0 0 ;
    select -r loftedSurface1 ;
    rename "loftedSurface1" "ear_Lsurf";
    createHair $counterjoint 1 18 0 0 0 0 5 0 1 1 1;
    delete pfxHair1;
    searchReplaceNames "hairSystem1" "ear_Lhairsystem" "all";
    delete "ear_Lhairsystem";
  for ($i=1;$i<=$counterjoint;$i++)
    {
        joint -p 0 0 0 -n "ear_LJoint_Skin1" ;
    }
    select -r "ear_LJoint_Skin*";
    parent -w;
    select -r "ear_LJoint_IK*";
    duplicate -rr;
    searchReplaceNames "ear_LJoint_IK*" "ear_LJoint_FK" "selected";
    //select -r "joint*";
   // searchReplaceNames "joint" "ear_LJoint_Skin" "hierarchy";

    select -r ear_Lspinecurve;
    makeCurvesDynamicHairs 1 0 1;
    searchReplaceNames "hairSystem1" "ear_Lhairsystem_DYN" "all";
    rename "follicle1""ear_LHair_follicle";
    setAttr "ear_LHair_follicleShape.pointLock" 1;
    select -cl;
    string $selection[]= `ls -transforms "ear_LJoint_IK*"`;
    int $counter=  (size($selection));
    CreateLocator;
    rename "locator1""ear_L_loc";
    $loc_pos=`xform  -q -t -ws ("ear_LJoint_IK"+$counter)`;
    move -ws $loc_pos[0] $loc_pos[1] $loc_pos[2] "ear_L_loc";
    select -r ("ear_LJoint_FK"+$counter) ear_L_loc;
    doCreatePointConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };


  for ($i=0;$i<=($counter/2);$i++)
    {

        group -n ear_L_IK_offset -em;
        group -n ear_L_FK_offset -em;
        curve -d 1 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -n "ear_L_IK" ;

        xform -cp;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

        joint -p 0 0 0 -n "ear_L_IK"  ;
        curve -d 1 -p 0.520619 0 1.99259e-005 -p 0.368133 0.368133 1.99259e-005 -p 0 0.520619 1.99259e-005 -p -0.368133 0.368133 1.99259e-005 -p -0.520619 0 1.99259e-005 -p -0.368133 -0.368133 1.99259e-005 -p 0 -0.520619 1.99259e-005 -p 0.368133 -0.368133 1.99259e-005 -p 0.520619 0 1.99259e-005 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -n "ear_L_FK" ;

    }
    select -cl;
    select -r "ear_L_IK*";
    parent -w;


};


global proc connect_ear_L()

{
    parent;
}


global proc freeze_ear_L()

{
    string $selection_joint[]= `ls -transforms "ear_LJoint_Skin*"`;
    int $counterjoint=  (size($selection_joint));
    for($a=1;$a<=$counterjoint;$a++)
    {
        setAttr ("ear_LJoint_Skin"+ $a +".rotateX")0;
        setAttr ("ear_LJoint_Skin"+ $a +".rotateY")0;
        setAttr ("ear_LJoint_Skin"+ $a +".rotateZ")0;
        setAttr ("ear_LJoint_Skin"+ $a +".translateX")0;
        setAttr ("ear_LJoint_Skin"+ $a +".translateY")0;
        setAttr ("ear_LJoint_Skin"+ $a +".translateZ")0;
    }
};

global proc bindsurf_ear_L()
{
    select -r "ear_L_IK*""ear_Lsurf";
    performSkinCluster true;

};


global proc dynamics_ear_L()
{
   CBdeleteConnection "ear_Lhairsystem_DYNShape.cti";
   select -r ear_L_FK;
   addAttr -ln "DynamicsSettings"  -at long  ear_L_FK;
   setAttr -e-channelBox true ear_L_FK.DynamicsSettings;
   addAttr -ln "Simulations"  -at long  -min 0 -max 1 -dv 0 ear_L_FK;
   setAttr -e-keyable true ear_L_FK.Simulations;
   addAttr -ln "Stiffness"  -at double  -min -1 -max 1 -dv 0 ear_L_FK;
   setAttr -e-keyable true ear_L_FK.Stiffness 0.3;
   addAttr -ln "Iterations"  -at double  ear_L_FK;
   setAttr -e-keyable true ear_L_FK.Iterations 30;
   addAttr -ln "Attraction"  -at double  ear_L_FK;
   setAttr -e-keyable true ear_L_FK.Attraction .3;
   addAttr -ln "Damping"  -at double  ear_L_FK;
   setAttr -e-keyable true ear_L_FK.Damping 0.2;
   addAttr -ln "StartFrame"  -at long  ear_L_FK;
   setAttr -e-keyable true ear_L_FK.StartFrame 1;
   connectAttr -f ear_L_FK.Stiffness ear_Lhairsystem_DYNShape.stiffness;
   connectAttr -f ear_L_FK.Iterations ear_Lhairsystem_DYNShape.iterations;
   connectAttr -f ear_L_FK.Attraction ear_Lhairsystem_DYNShape.startCurveAttract;
   connectAttr -f ear_L_FK.Damping ear_Lhairsystem_DYNShape.damp;
   connectAttr -f ear_L_FK.StartFrame ear_Lhairsystem_DYNShape.startFrame;
   setDrivenKeyframe -currentDriver ear_L_FK.Simulations ear_Lhairsystem_DYNShape.simulationMethod;
   setAttr "ear_L_FK.Simulations" 0;
   setAttr "ear_Lhairsystem_DYNShape.simulationMethod" 1;
   setDrivenKeyframe -currentDriver ear_L_FK.Simulations ear_Lhairsystem_DYNShape.simulationMethod;
   setAttr "ear_L_FK.Simulations" 1;
   setAttr "ear_Lhairsystem_DYNShape.simulationMethod" 3;
   setDrivenKeyframe -currentDriver ear_L_FK.Simulations ear_Lhairsystem_DYNShape.simulationMethod;
   group -n ear_LDynamics_Grp -em;
   setAttr "ear_LhairsystemFollicles.visibility" 0;
};


global proc clearOutlinerEar_L()
{

}




//add initial setting to ear_R







global proc ear_R()

{

    columnLayout ;
    text " ";
    text -h 20 "Step 1 :Create joints and curve(IK)" ;
    button -h 50 -w 300 -label "Add Right Ear Dynamics Setting To Rig" -command "ADD_ear_R"  -bgc 0.5 .5 0.0 addmatch;
  	text "Do the placing and parenting process,Carefully" ;
  	//text " ";
    text -h 20 "Step 2: After arranging the hairSystems U position DO freeze";
    button -h 50 -w 300 -label "Freeze ear_RJoint_Skin" -command "freeze_ear_R"-bgc .5 1 .5  ;
    text " ";
    text -h 20 "Step 3: Skin the NurbsSurface with the IK joints";
    button -h 50 -w 300 -label "Bind Surf" -command "bindsurf_ear_R"-bgc .1 .1 .5  ;
    text "Rename the FK control Topology to Ear_FK ";
    text -h 20 "Step 4: Apply Dynamics Setting to the Ear ";
    button -h 50 -w 300 -label "Apply Dynamics" -command "dynamics_ear_R"-bgc .3 .3 .5  ;
    text "Finish It!!! u have applied the Dynamics to Right Ear";
    text -h 20 "Step 5: Clean You Outliner Please...";
    button  -h 50 -w 300 -l "Clean Outliner" -c "clearOutlinerEar_R" -bgc 1 1 1;
    setParent..;
    text " ";
    columnLayout -adj true;
    separator -st "in";
    text  "Note: fk controls should be parented(parent -s -r) to joints";
    text "and corrects its orientation & ik controls parented to joints as ";
    text "same method.And match the position using contraint and  ";
    text " parent to offset grp";

         string $ex = ("ear_RJoint_IK*");

    if (`objExists  $ex`)
    {
        button -edit -en 0 -l "Ear_R Settings are done" addmatch;
    }

}

//add initial setting


global proc ADD_ear_R ()

{

        string $ex = ("ear_RJoint_IK*");
    if (`objExists  $ex`)
    {
        button -edit -en 0 -l "Ear_R Settings are done" addmatch;
    }
    string $selection_joint[]= `ls -transforms "joint*"`;
    int $counterjoint=  (size($selection_joint));
  for($a=1;$a<=$counterjoint;$a++)
    {
        rename ("joint"+ $a )("ear_RJoint_IK"+ $a);
    }
    select -r curve1;
    move -r -os -wd -.1 0 0 ;
    duplicate -rr;
    move -r -os -wd .2 0 0 ;
    select -r curve1 curve2 ;
    loft -ch 1 -u 1 -c 0 -ar 1 -d 3 -ss 1 -rn 0 -po 0 -rsn true "curve1" "curve2";
    select -r curve2 ;
    doDelete;
    select -r curve1 ;
    rename "curve1" "ear_Rspinecurve";
    move -r -os -wd .1 0 0 ;
    select -r loftedSurface1 ;
    rename "loftedSurface1" "ear_Rsurf";
    createHair $counterjoint 1 18 0 0 0 0 5 0 1 1 1;
    delete pfxHair1;
    searchReplaceNames "hairSystem1" "ear_Rhairsystem" "all";
    delete "ear_Rhairsystem";
  for ($i=1;$i<=$counterjoint;$i++)
    {
        joint -p 0 0 0 -n "ear_RJoint_Skin1" ;
    }
    select -r "ear_RJoint_Skin*";
    parent -w;
    select -r "ear_RJoint_IK*";
    duplicate -rr;
    searchReplaceNames "ear_RJoint_IK*" "ear_RJoint_FK" "selected";
    //select -r "joint*";
   // searchReplaceNames "joint" "ear_RJoint_Skin" "hierarchy";

    select -r ear_Rspinecurve;
    makeCurvesDynamicHairs 1 0 1;
    searchReplaceNames "hairSystem1" "ear_Rhairsystem_DYN" "all";
    rename "follicle1""ear_RHair_follicle";
    setAttr "ear_RHair_follicleShape.pointLock" 1;
    select -cl;
    string $selection[]= `ls -transforms "ear_RJoint_IK*"`;
    int $counter=  (size($selection));
    CreateLocator;
    rename "locator1""ear_R_loc";
    $loc_pos=`xform  -q -t -ws ("ear_RJoint_IK"+$counter)`;
    move -ws $loc_pos[0] $loc_pos[1] $loc_pos[2] "ear_R_loc";
    select -r ("ear_RJoint_FK"+$counter) ear_R_loc;
    doCreatePointConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };


  for ($i=0;$i<=($counter/2);$i++)
    {

        group -n ear_R_IK_offset -em;
        group -n ear_R_FK_offset -em;
        curve -d 1 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 0.5 0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -n "ear_R_IK" ;

        xform -cp;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

        joint -p 0 0 0 -n "ear_R_IK"  ;
        curve -d 1 -p 0.520619 0 1.99259e-005 -p 0.368133 0.368133 1.99259e-005 -p 0 0.520619 1.99259e-005 -p -0.368133 0.368133 1.99259e-005 -p -0.520619 0 1.99259e-005 -p -0.368133 -0.368133 1.99259e-005 -p 0 -0.520619 1.99259e-005 -p 0.368133 -0.368133 1.99259e-005 -p 0.520619 0 1.99259e-005 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -n "ear_R_FK" ;

    }
    select -cl;
    select -r "ear_R_IK*";
    parent -w;


};


global proc connect_ear_R()

{
    parent;
}


global proc freeze_ear_R()

{
    string $selection_joint[]= `ls -transforms "ear_RJoint_Skin*"`;
    int $counterjoint=  (size($selection_joint));
    for($a=1;$a<=$counterjoint;$a++)
    {
        setAttr ("ear_RJoint_Skin"+ $a +".rotateX")0;
        setAttr ("ear_RJoint_Skin"+ $a +".rotateY")0;
        setAttr ("ear_RJoint_Skin"+ $a +".rotateZ")0;
        setAttr ("ear_RJoint_Skin"+ $a +".translateX")0;
        setAttr ("ear_RJoint_Skin"+ $a +".translateY")0;
        setAttr ("ear_RJoint_Skin"+ $a +".translateZ")0;
    }
};

global proc bindsurf_ear_R()
{
    select -r "ear_R_IK*""ear_Rsurf";
    performSkinCluster true;

};


global proc dynamics_ear_R()
{
   CBdeleteConnection "ear_Rhairsystem_DYNShape.cti";
   select -r ear_R_FK;
   addAttr -ln "DynamicsSettings"  -at long  ear_R_FK;
   setAttr -e-channelBox true ear_R_FK.DynamicsSettings;
   addAttr -ln "Simulations"  -at long  -min 0 -max 1 -dv 0 ear_R_FK;
   setAttr -e-keyable true ear_R_FK.Simulations;
   addAttr -ln "Stiffness"  -at double  -min -1 -max 1 -dv 0 ear_R_FK;
   setAttr -e-keyable true ear_R_FK.Stiffness 0.3;
   addAttr -ln "Iterations"  -at double  ear_R_FK;
   setAttr -e-keyable true ear_R_FK.Iterations 30;
   addAttr -ln "Attraction"  -at double  ear_R_FK;
   setAttr -e-keyable true ear_R_FK.Attraction .3;
   addAttr -ln "Damping"  -at double  ear_R_FK;
   setAttr -e-keyable true ear_R_FK.Damping 0.2;
   addAttr -ln "StartFrame"  -at long  ear_R_FK;
   setAttr -e-keyable true ear_R_FK.StartFrame 1;
   connectAttr -f ear_R_FK.Stiffness ear_Rhairsystem_DYNShape.stiffness;
   connectAttr -f ear_R_FK.Iterations ear_Rhairsystem_DYNShape.iterations;
   connectAttr -f ear_R_FK.Attraction ear_Rhairsystem_DYNShape.startCurveAttract;
   connectAttr -f ear_R_FK.Damping ear_Rhairsystem_DYNShape.damp;
   connectAttr -f ear_R_FK.StartFrame ear_Rhairsystem_DYNShape.startFrame;
   setDrivenKeyframe -currentDriver ear_R_FK.Simulations ear_Rhairsystem_DYNShape.simulationMethod;
   setAttr "ear_R_FK.Simulations" 0;
   setAttr "ear_Rhairsystem_DYNShape.simulationMethod" 1;
   setDrivenKeyframe -currentDriver ear_R_FK.Simulations ear_Rhairsystem_DYNShape.simulationMethod;
   setAttr "ear_R_FK.Simulations" 1;
   setAttr "ear_Rhairsystem_DYNShape.simulationMethod" 3;
   setDrivenKeyframe -currentDriver ear_R_FK.Simulations ear_Rhairsystem_DYNShape.simulationMethod;
   group -n ear_RDynamics_Grp -em;
   setAttr "ear_RhairsystemFollicles.visibility" 0;
};


global proc clearOutlinerEar_R()
{

}



//add facial setup








global proc facial()

{

columnLayout ;

	text " ";
	text "Type the name of the blendshape u want to connect from the  ";
	text"blendshape input history node";
	text " ";
    textFieldGrp -cw2 100 150 -l "Name the Node: " t1;
    text " ";
    text -align "right" -l " Note:- Match the exact shape name" ;
    text " ";

rowColumnLayout -nc 50;


    button - h 30 -w 150 -label "RightSide" -command "ADD_R" -bgc .5 0 0;
    button - h 30 -w 150 -label "LeftSide" -command "ADD_L" -bgc  0 0 .5;

}

global proc ADD_R()
{
    string $name = `textFieldGrp -q -tx t1`;
    select `ls -sl`;
    rename $name;
    setAttr -lock true -keyable false -channelBox false ($name + ".tz");
    setAttr -lock true -keyable false -channelBox false ($name + ".rx");
    setAttr -lock true -keyable false -channelBox false ($name + ".ry");
    setAttr -lock true -keyable false -channelBox false ($name + ".rz");
    setAttr -lock true -keyable false -channelBox false ($name + ".sx");
    setAttr -lock true -keyable false -channelBox false ($name + ".sy");
    setAttr -lock true -keyable false -channelBox false ($name + ".sz");
    setAttr -lock true -keyable false -channelBox false ($name + ".v");
    shadingNode -asUtility addDoubleLinear -n ( $name + "Right_ADL");
    shadingNode -asUtility clamp -n ( $name + "RightCLMP_X");
    shadingNode -asUtility clamp -n ( $name + "RightCLMP_Y");
    shadingNode -asUtility multiplyDivide -n ($name + "Right_DIV");
    setAttr ($name + "RightCLMP_X.maxR") 1;
    setAttr ($name + "RightCLMP_Y.maxR") 1;
    setAttr ($name + "Right_ADL.input2") 1;
    connectAttr -f ($name + "Right_ADL.output") ( $name + "RightCLMP_X.inputR");
    connectAttr -f ($name + "RightCLMP_X.outputR") ($name + "Right_DIV.input1X");
    connectAttr -f ($name + "RightCLMP_Y.outputR") ($name + "Right_DIV.input2X");
    connectAttr -f ($name + ".translateX") ($name + "Right_ADL.input1");
    connectAttr -f ($name + ".translateY") ($name + "RightCLMP_Y.inputR");
    connectAttr -f ($name + "Right_DIV.outputX") ("fACIAL." + $name + "R");

}

global proc ADD_L()
{
    string $name = `textFieldGrp -q -tx t1 `;
    shadingNode -asUtility addDoubleLinear -n ( $name + "Left_ADL");
    shadingNode -asUtility clamp -n ( $name + "LeftCLMP_X");
    shadingNode -asUtility clamp -n ( $name + "LeftCLMP_Y");
    shadingNode -asUtility multiplyDivide -n ($name + "Left_DIV");
    shadingNode -asUtility multiplyDivide -n ($name + "Left_X_DIV");
    setAttr ($name + "Left_X_DIV.input2X") -1;
    setAttr ($name + "Left_ADL.input2") 1;
    setAttr ($name + "LeftCLMP_X.maxR") 1;
    setAttr ($name + "LeftCLMP_Y.maxR") 1;
    connectAttr -f ($name + "Left_ADL.output") ( $name + "LeftCLMP_X.inputR");
    connectAttr -f ($name + "LeftCLMP_X.outputR") ($name + "Left_DIV.input1X");
    connectAttr -f ($name + "LeftCLMP_Y.outputR") ($name + "Left_DIV.input2X");
    connectAttr -f ($name + "Left_X_DIV.outputX") ($name + "Left_ADL.input1");
    connectAttr -f ($name + ".translateX") ($name + "Left_X_DIV.input1X");
    connectAttr -f ($name + ".translateY") ($name + "LeftCLMP_Y.inputR");
    connectAttr -f ($name + "Left_DIV.outputX") ("fACIAL."+ $name + "L");

}


//toony



global proc toony()
{


    columnLayout -adj true;
   // separator;
    text " " ;
    text "step1: Name the node. eg: toony_head or toony_jaw ";
    text " " ;
    textFieldGrp  -cw2 55 200 -l "Node Name" nname;
    text " " ;
    text " create the driver joint and 4 toony joint and create a control.";
    text " Not to rename now";
    text " ";
    rowColumnLayout -nc 50;
    button - h 50 -w 150 -label "rename driver joint" -command "renamedriver" -bgc .5 0 0;
	 button - h 50 -w 150 -label "rename driven joint" -command "renamedriven" -bgc .5 0 0;
	 setParent..;

    columnLayout -adj true;
    button - h 50 -w 150 -label "Add nodes" -command "toonyAdd" -bgc .5 0 0;
    text " ";



}

    global proc toonyAdd()

{

	string $name =`textFieldGrp -q -tx nname`;
	//print $name;

	shadingNode -asUtility multiplyDivide -n ($name + "_StretchFactor_MulDIV");
	shadingNode -asUtility plusMinusAverage -n ($name + "_minusstretchFactor_pMA");
	setAttr ($name + "_minusstretchFactor_pMA.input1D[1]") -1;
	connectAttr -force ($name +"_StretchFactor_MulDIV.outputX") ($name + "_minusstretchFactor_pMA.input1D[0]");
	shadingNode -asUtility gammaCorrect -n ($name + "_stretchbias_gma");
	setAttr ($name +"_stretchbias_gma.valueX") 0.333;
	setAttr ($name +"_stretchbias_gma.valueY") 0.667;
	shadingNode -asUtility multiplyDivide -n ($name + "_negGamma_MulDIV");
	setAttr ($name + "_negGamma_MulDIV.input2X") -1;
	shadingNode -asUtility plusMinusAverage -n ($name + "_substractGamma_pMA");
	shadingNode -asUtility plusMinusAverage -n ($name + "_AddoneB_pMA");
	setAttr ($name + "_AddoneB_pMA.input1D[1]") 1;
	connectAttr -force ($name + "_stretchbias_gma.outValueX") ($name + "_substractGamma_pMA.input1D[1]");
	connectAttr -force ($name + "_stretchbias_gma.outValueY") ($name + "_substractGamma_pMA.input1D[0]");
	connectAttr -force ($name + "_negGamma_MulDIV.outputX") ($name + "_AddoneB_pMA.input1D[0]");
	connectAttr -force ($name + "_stretchbias_gma.outValueY") ($name + "_negGamma_MulDIV.input1X");

	shadingNode -asUtility multiplyDivide -n ($name + "_ProGammaFactor_MulDIV");
	shadingNode -asUtility multiplyDivide -n ($name + "_MulBy3_MulDIV");
	setAttr ($name +"_MulBy3_MulDIV.input2Z") 3;
	setAttr ($name +"_MulBy3_MulDIV.input2X") 3;
	setAttr ($name +"_MulBy3_MulDIV.input2Y") 3;
	connectAttr -force ($name + "_substractGamma_pMA.output1D") ($name + "_ProGammaFactor_MulDIV.input1Z");
	connectAttr -force ($name + "_stretchbias_gma.outValueX") ($name + "_ProGammaFactor_MulDIV.input1X");
	connectAttr -force ($name + "_AddoneB_pMA.output1D") ($name + "_ProGammaFactor_MulDIV.input1Y");
	connectAttr -force ($name + "_minusstretchFactor_pMA.output1D") ($name + "_ProGammaFactor_MulDIV.input2Z");
	connectAttr -force ($name + "_minusstretchFactor_pMA.output1D") ($name + "_ProGammaFactor_MulDIV.input2Y");
	connectAttr -force ($name + "_minusstretchFactor_pMA.output1D") ($name + "_ProGammaFactor_MulDIV.input2X");
	connectAttr -force ($name + "_ProGammaFactor_MulDIV.outputZ") ($name + "_MulBy3_MulDIV.input1Z");
	connectAttr -force ($name + "_ProGammaFactor_MulDIV.outputY") ($name + "_MulBy3_MulDIV.input1Y");
	connectAttr -force ($name + "_ProGammaFactor_MulDIV.outputX") ($name + "_MulBy3_MulDIV.input1X");

	shadingNode -asUtility multiplyDivide -n ($name + "_HeadScaleValue_MulDIV");
	setAttr ($name +"_HeadScaleValue_MulDIV.input2X") -1;
	shadingNode -asUtility plusMinusAverage -n ($name + "_AddoneA_pMA");
	shadingNode -asUtility plusMinusAverage -n ($name + "_AddoneC_pMA");
	shadingNode -asUtility plusMinusAverage -n ($name + "_AddoneD_pMA");
	setAttr ($name + "_AddoneD_pMA.input1D[1]") 1;
	setAttr ($name + "_AddoneC_pMA.input1D[1]") 1;
	setAttr ($name + "_AddoneA_pMA.input1D[1]") 1;
	connectAttr -force ($name + "_MulBy3_MulDIV.outputY") ($name + "_AddoneC_pMA.input1D[0]");
	connectAttr -force ($name + "_MulBy3_MulDIV.outputX") ($name + "_AddoneA_pMA.input1D[0]");
	connectAttr -force ($name + "_MulBy3_MulDIV.outputZ") ($name + "_AddoneD_pMA.input1D[0]");
	setAttr ($name + "_substractGamma_pMA.operation") 2;
	setAttr ($name + "_StretchFactor_MulDIV.operation") 2;


	shadingNode -asUtility multiplyDivide -n ($name + "_CalRotValue_MulDIV");
	setAttr ($name +"_CalRotValue_MulDIV.input2Z") -40;
	setAttr ($name +"_CalRotValue_MulDIV.input2X") -40;

	shadingNode -asUtility multiplyDivide -n ($name + "_HeadScale_MulDIV");
	connectAttr -force ($name + "_AddoneD_pMA.output1D") ($name + "_HeadScale_MulDIV.input1Y");
	connectAttr -force ($name + "_AddoneA_pMA.output1D") ($name + "_HeadScale_MulDIV.input1X");
	connectAttr -force ($name + "_AddoneC_pMA.output1D") ($name + "_HeadScale_MulDIV.input1Z");
	connectAttr -force ($name + "_HeadScaleValue_MulDIV.outputX") ($name + "_HeadScale_MulDIV.input2Z");
	connectAttr -force ($name + "_HeadScaleValue_MulDIV.outputX") ($name + "_HeadScale_MulDIV.input2Y");
	connectAttr -force ($name + "_HeadScaleValue_MulDIV.outputX") ($name + "_HeadScale_MulDIV.input2X");


	select -r ($name + "_control") ;
	select -tgl ($name + "_driverend") ;
	doCreateParentConstraintArgList 1 { "1","0","0","0","1","1","1","1","","1" };
	float $scalevalue = `getAttr ($name + "_driverend.translateX")`;
	setAttr ($name + "_StretchFactor_MulDIV.input2X") $scalevalue;
	connectAttr -f ($name + "_driverend.translateX") ($name + "_StretchFactor_MulDIV.input1X");
	connectAttr -f ($name + "_control.translateX") ($name + "_CalRotValue_MulDIV.input1X");
	connectAttr -f ($name + "_control.translateZ") ($name + "_CalRotValue_MulDIV.input1Z");
	addAttr -ln "stretchbias"  -at double  ($name + "_control");
	setAttr -e-keyable true ($name + "_control.stretchbias");
	addAttr -ln "MaintainVolume"  -at double  ($name + "_control");
	setAttr -e-keyable true ($name + "_control.MaintainVolume");
	setAttr ($name + "_control.stretchbias") -2;
	setAttr ($name + "_control.MaintainVolume") 1;
	connectAttr -f ($name + "_control.MaintainVolume") ($name + "_HeadScaleValue_MulDIV.input1X");
	setAttr ($name + "_HeadScale_MulDIV.operation") 3;
	connectAttr -f ($name + "_CalRotValue_MulDIV.outputZ") ($name + "_skin1.rotateY");
	connectAttr -f ($name + "_CalRotValue_MulDIV.outputX") ($name + "_skin1.rotateZ");
	connectAttr -f ($name + "_CalRotValue_MulDIV.outputZ") ($name + "_skin2.rotateY");
	connectAttr -f ($name + "_CalRotValue_MulDIV.outputX") ($name + "_skin2.rotateZ");
	connectAttr -f ($name + "_CalRotValue_MulDIV.outputZ") ($name + "_skin3.rotateY");
	connectAttr -f ($name + "_CalRotValue_MulDIV.outputX") ($name + "_skin3.rotateZ");
	connectAttr -f ($name + "_AddoneC_pMA.output1D") ($name + "_skin1.scaleX");
	connectAttr -f ($name + "_AddoneD_pMA.output1D") ($name + "_skin2.scaleX");
	connectAttr -f ($name + "_AddoneA_pMA.output1D") ($name + "_skin3.scaleX");
	connectAttr -f ($name + "_HeadScale_MulDIV.outputX") ($name + "_skin1.scaleZ");
	connectAttr -f ($name + "_HeadScale_MulDIV.outputX") ($name + "_skin1.scaleY");
	connectAttr -f ($name + "_HeadScale_MulDIV.outputY") ($name + "_skin2.scaleY");
	connectAttr -f ($name + "_HeadScale_MulDIV.outputY") ($name + "_skin2.scaleZ");
	connectAttr -f ($name + "_HeadScale_MulDIV.outputZ") ($name + "_skin3.scaleZ");
	connectAttr -f ($name + "_HeadScale_MulDIV.outputZ") ($name + "_skin3.scaleY");

}

global proc renamedriver()

{
	string $name =`textFieldGrp -q -tx nname`;
	select joint1;
	rename joint1 ($name + "_driverstart");
	select joint2;
	rename joint2 ($name + "_driverend");

}

 global proc renamedriven()

{
	string $name =`textFieldGrp -q -tx nname`;
	//select joint3;
	rename joint3 ($name + "_skin1");
	//select joint4;
	rename joint4 ($name + "_skin2");
	rename joint5 ($name + "_skin3");
	rename joint6 ($name + "_skin3");
	rename orient1 ($name + "_control");
}



//finger Attributes


global proc finger()
{


    columnLayout -adj true;
   // separator;
    text " " ;
    text "step1: Name the finger control to add attribute ";
    text " " ;
    textFieldGrp  -cw2 80 200 -l "Control Name" contrlname;
    text " " ;

 	columnLayout -adj true;
    button -h 50 -w 300 -label "Add Attributes" -command "fingerAdd" -bgc .5 .5 0;
    text " ";
    columnLayout -adj on ;
    separator -st "in";
    text -l "Remove Attributes" -fn "boldLabelFont" -h 20;
    //separator -st "in";
    rowColumnLayout -nc 2 ;

    checkBox -l "Lock Curl & Spread Attibutes" -h 20  -onc "Lon" -ofc "Loff" -v 0;
    //checkBox -l "Hair Controls" -h 20 -onc "Hon" -ofc "Hoff" -v 0;

    setParent -u;
	setParent..;
	columnLayout -adj on ;
    separator -st "in";
    text -l "Connect Attributes" -fn "boldLabelFont" -h 20;
	rowColumnLayout -nc 2;

    button -h 50 -w 150 -label "Curl Attributes" -command "fingerConnectCurl" -bgc .5 .5 0;
    button -h 50 -w 150 -label "Spread Attributes" -command "fingerConnectSpread" -bgc .5 .5 0;


    button -h 50 -w 150 -label "Twist Attributes" -command "fingerConnectTwist" -bgc .5 .5 0;
    button -h 50 -w 150 -label "Stretch Attributes" -command "fingerConnectStretch" -bgc .5 .5 0;

    text " ";



}


global proc fingerAdd()

{

	string $name =`textFieldGrp -q -tx contrlname`;
	string $contrl[] = `ls -sl`;
	string $each;

	for($each in $contrl)
		{
			rename $each $name;
		}


	addAttr -ln "Curl"  -at "enum" -en "---------------"   $name;
	setAttr -e-channelBox true  ($name + ".Curl");

	addAttr -min -10 -max 10 -ln "Point_Curl"  -at double   $name;
	setAttr -e -keyable true  ($name + ".Point_Curl");
	addAttr -ln "Point_Curl_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Curl_A");
	addAttr -ln "Point_Curl_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Curl_B");
	addAttr -ln "Point_Curl_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Curl_C");
	addAttr -ln "Point_Curl_O"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Curl_O");


	addAttr -min -10 -max 10 -ln "Mid_Curl"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Curl");
	addAttr -ln "Mid_Curl_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Curl_A");
	addAttr -ln "Mid_Curl_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Curl_B");
	addAttr -ln "Mid_Curl_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Curl_C");
		addAttr -ln "Mid_Curl_O"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Curl_O");


	addAttr -min -10 -max 10 -ln "Ring_Curl"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Curl");
	addAttr -ln "Ring_Curl_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Curl_A");
	addAttr -ln "Ring_Curl_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Curl_B");
	addAttr -ln "Ring_Curl_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Curl_C");
		addAttr -ln "Ring_Curl_O"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Curl_O");


	addAttr -min -10 -max 10 -ln "Pinky_Curl"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Curl");
	addAttr -ln "Pinky_Curl_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Curl_A");
	addAttr -ln "Pinky_Curl_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Curl_B");
	addAttr -ln "Pinky_Curl_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Curl_C");
		addAttr -ln "Pinky_Curl_O"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Curl_O");

	addAttr -min -10 -max 10 -ln "Thumb_Curl"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Curl");
	addAttr -ln "Thumb_Curl_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Curl_A");
	addAttr -ln "Thumb_Curl_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Curl_B");
	addAttr -ln "Thumb_Curl_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Curl_C");



	addAttr -ln "SpreadFingers"  -at "enum" -en "---------------"   $name;
	setAttr -e -channelBox true  ($name + ".SpreadFingers");

	addAttr -min -10 -max 10 -ln "Point_Spread"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Spread");
	addAttr -ln "Point_Spread_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Spread_A");
	addAttr -ln "Point_Spread_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Spread_B");
	addAttr -ln "Point_Spread_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Spread_C");


	addAttr -min -10 -max 10 -ln "Mid_Spread"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Spread");
	addAttr -ln "Mid_Spread_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Spread_A");
	addAttr -ln "Mid_Spread_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Spread_B");
	addAttr -ln "Mid_Spread_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Spread_C");


	addAttr -min -10 -max 10 -ln "Ring_Spread"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Spread");
	addAttr -ln "Ring_Spread_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Spread_A");
	addAttr -ln "Ring_Spread_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Spread_B");
	addAttr -ln "Ring_Spread_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Spread_C");

	addAttr -min -10 -max 10 -ln "Pinky_Spread"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Spread");
	addAttr -ln "Pinky_Spread_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Spread_A");
	addAttr -ln "Pinky_Spread_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Spread_B");
	addAttr -ln "Pinky_Spread_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Spread_C");

	addAttr -min -10 -max 10 -ln "Thumb_Spread"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Spread");
	addAttr -ln "Thumb_Spread_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Spread_A");
	addAttr -ln "Thumb_Spread_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Spread_B");
	addAttr -ln "Thumb_Spread_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Spread_C");

	addAttr -ln "Twist"  -at "enum" -en "---------------"   $name;
	setAttr -e-channelBox true  ($name + ".Twist");

	addAttr -min -10 -max 10 -ln "Point_Twist"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Twist");
	addAttr -ln "Point_Twist_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Twist_A");
	addAttr -ln "Point_Twist_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Twist_B");
	addAttr -ln "Point_Twist_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Twist_C");

	addAttr -min -10 -max 10 -ln "Mid_Twist"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Twist");
	addAttr -ln "Mid_Twist_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Twist_A");
	addAttr -ln "Mid_Twist_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Twist_B");
	addAttr -ln "Mid_Twist_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Twist_C");

	addAttr -min -10 -max 10 -ln "Ring_Twist"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Twist");
	addAttr -ln "Ring_Twist_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Twist_A");
	addAttr -ln "Ring_Twist_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Twist_B");
	addAttr -ln "Ring_Twist_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Twist_C");

	addAttr -min -10 -max 10 -ln "Pinky_Twist"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Twist");
	addAttr -ln "Pinky_Twist_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Twist_A");
	addAttr -ln "Pinky_Twist_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Twist_B");
	addAttr -ln "Pinky_Twist_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Twist_C");

	addAttr -min -10 -max 10 -ln "Thumb_Twist"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Twist");
	addAttr -ln "Thumb_Twist_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Twist_A");
	addAttr -ln "Thumb_Twist_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Twist_B");
	addAttr -ln "Thumb_Twist_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Twist_C");

	addAttr -ln "Stretch"  -at "enum" -en "---------------"   $name;
	setAttr -e-channelBox true  ($name + ".Stretch");

	addAttr -min -10 -max 10 -ln "Point_Stretch"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Stretch");
	addAttr -ln "Point_Stretch_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Stretch_A");
	addAttr -ln "Point_Stretch_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Stretch_B");
	addAttr -ln "Point_Stretch_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Point_Stretch_C");

	addAttr -min -10 -max 10 -ln "Mid_Stretch"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Stretch");
	addAttr -ln "Mid_Stretch_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Stretch_A");
	addAttr -ln "Mid_Stretch_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Stretch_B");
	addAttr -ln "Mid_Stretch_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Mid_Stretch_C");

	addAttr -min -10 -max 10 -ln "Ring_Stretch"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Stretch");
	addAttr -ln "Ring_Stretch_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Stretch_A");
	addAttr -ln "Ring_Stretch_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Stretch_B");
	addAttr -ln "Ring_Stretch_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Ring_Stretch_C");

	addAttr -min -10 -max 10 -ln "Pinky_Stretch"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Stretch");
	addAttr -ln "Pinky_Stretch_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Stretch_A");
	addAttr -ln "Pinky_Stretch_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Stretch_B");
	addAttr -ln "Pinky_Stretch_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Pinky_Stretch_C");

	addAttr -min -10 -max 10 -ln "Thumb_Stretch"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Stretch");
	addAttr -ln "Thumb_Stretch_A"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Stretch_A");
	addAttr -ln "Thumb_Stretch_B"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Stretch_B");
	addAttr -ln "Thumb_Stretch_C"  -at double   $name;
	setAttr -e-keyable true  ($name + ".Thumb_Stretch_C");

}


	global proc Loff()
{
   setAttr -k true -cb false".Point_Curl";
   setAttr -k true -cb false".Mid_Curl";
   setAttr -k true -cb false".Ring_Curl";
   setAttr -k true -cb false".Pinky_Curl";
   setAttr -k true -cb false".Thumb_Curl";
   setAttr -k true -cb false".Point_Spread";
   setAttr -k true -cb false".Mid_Spread";
   setAttr -k true -cb false".Ring_Spread";
   setAttr -k true -cb false".Pinky_Spread";
   setAttr -k true -cb false".Thumb_Spread";


}

	global proc Lon()
{
   setAttr -k false -cb true".Point_Curl";
   setAttr -k false -cb true".Mid_Curl";
   setAttr -k false -cb true".Ring_Curl";
   setAttr -k false -cb true".Pinky_Curl";
   setAttr -k false -cb true".Thumb_Curl";
   setAttr -k false -cb true".Point_Spread";
   setAttr -k false -cb true".Mid_Spread";
   setAttr -k false -cb true".Ring_Spread";
   setAttr -k false -cb true".Pinky_Spread";
   setAttr -k false -cb true".Thumb_Spread";



}


global proc fingerConnectCurl()
{
	connectAttr -f Fingers_L.Point_Curl_A FKExtraIndexFinger1_L.rotateZ;
	connectAttr -f Fingers_L.Point_Curl_B FKExtraIndexFinger2_L.rotateZ;
	connectAttr -f Fingers_L.Point_Curl_C FKExtraIndexFinger3_L.rotateZ;
	connectAttr -f Fingers_L.Point_Curl_O FKExtraIndexFinger0_L.rotateZ;


	connectAttr -f Fingers_L.Thumb_Curl_A FKExtraThumbFinger1_L.rotateZ;
	connectAttr -f Fingers_L.Thumb_Curl_B FKExtraThumbFinger2_L.rotateZ;
	connectAttr -f Fingers_L.Thumb_Curl_C FKExtraThumbFinger3_L.rotateZ;
	connectAttr -f Fingers_L.Thumb_Curl_O FKExtraThumbFinger0_L.rotateZ;

	connectAttr -f Fingers_L.Mid_Curl_C FKExtraMiddleFinger3_L.rotateZ;
	connectAttr -f Fingers_L.Mid_Curl_B FKExtraMiddleFinger2_L.rotateZ;
	connectAttr -f Fingers_L.Mid_Curl_A FKExtraMiddleFinger1_L.rotateZ;
	connectAttr -f Fingers_L.Mid_Curl_O FKExtraMiddleFinger0_L.rotateZ;

	connectAttr -f Fingers_L.Pinky_Curl_C FKExtraPinkyFinger3_L.rotateZ;
	connectAttr -f Fingers_L.Pinky_Curl_B FKExtraPinkyFinger2_L.rotateZ;
	connectAttr -f Fingers_L.Pinky_Curl_A FKExtraPinkyFinger1_L.rotateZ;
	connectAttr -f Fingers_L.Pinky_Curl_O FKExtraPinkyFinger0_L.rotateZ;

	connectAttr -f Fingers_L.Ring_Curl_C FKExtraRingFinger3_L.rotateZ;
	connectAttr -f Fingers_L.Ring_Curl_B FKExtraRingFinger2_L.rotateZ;
	connectAttr -f Fingers_L.Ring_Curl_A FKExtraRingFinger1_L.rotateZ;
	connectAttr -f Fingers_L.Ring_Curl_O FKExtraRingFinger0_L.rotateZ;


	connectAttr -f Fingers_R.Point_Curl_A FKExtraIndexFinger1_R.rotateZ;
	connectAttr -f Fingers_R.Point_Curl_B FKExtraIndexFinger2_R.rotateZ;
	connectAttr -f Fingers_R.Point_Curl_C FKExtraIndexFinger3_R.rotateZ;
	connectAttr -f Fingers_R.Point_Curl_O FKExtraIndexFinger0_R.rotateZ;

	connectAttr -f Fingers_R.Thumb_Curl_A FKExtraThumbFinger1_R.rotateZ;
	connectAttr -f Fingers_R.Thumb_Curl_B FKExtraThumbFinger2_R.rotateZ;
	connectAttr -f Fingers_R.Thumb_Curl_C FKExtraThumbFinger3_R.rotateZ;
		connectAttr -f Fingers_R.Thumb_Curl_O FKExtraThumbFinger0_R.rotateZ;

	connectAttr -f Fingers_R.Mid_Curl_C FKExtraMiddleFinger3_R.rotateZ;
	connectAttr -f Fingers_R.Mid_Curl_B FKExtraMiddleFinger2_R.rotateZ;
	connectAttr -f Fingers_R.Mid_Curl_A FKExtraMiddleFinger1_R.rotateZ;
	connectAttr -f Fingers_R.Mid_Curl_O FKExtraMiddleFinger0_R.rotateZ;

	connectAttr -f Fingers_R.Pinky_Curl_C FKExtraPinkyFinger3_R.rotateZ;
	connectAttr -f Fingers_R.Pinky_Curl_B FKExtraPinkyFinger2_R.rotateZ;
	connectAttr -f Fingers_R.Pinky_Curl_A FKExtraPinkyFinger1_R.rotateZ;
	connectAttr -f Fingers_R.Pinky_Curl_O FKExtraPinkyFinger0_R.rotateZ;

	connectAttr -f Fingers_R.Ring_Curl_C FKExtraRingFinger3_R.rotateZ;
	connectAttr -f Fingers_R.Ring_Curl_B FKExtraRingFinger2_R.rotateZ;
	connectAttr -f Fingers_R.Ring_Curl_A FKExtraRingFinger1_R.rotateZ;
	connectAttr -f Fingers_R.Ring_Curl_O FKExtraRingFinger0_R.rotateZ;


}


global proc fingerConnectSpread()
{
	connectAttr -f Fingers_L.Point_Spread_A FKExtraIndexFinger1_L.rotateY;
	connectAttr -f Fingers_L.Point_Spread_B FKExtraIndexFinger2_L.rotateY;
	connectAttr -f Fingers_L.Point_Spread_C FKExtraIndexFinger3_L.rotateY;
	connectAttr -f Fingers_L.Thumb_Spread_A FKExtraThumbFinger1_L.rotateY;
	connectAttr -f Fingers_L.Thumb_Spread_B FKExtraThumbFinger2_L.rotateY;
	connectAttr -f Fingers_L.Thumb_Spread_C FKExtraThumbFinger3_L.rotateY;
	connectAttr -f Fingers_L.Mid_Spread_C FKExtraMiddleFinger3_L.rotateY;
	connectAttr -f Fingers_L.Mid_Spread_B FKExtraMiddleFinger2_L.rotateY;
	connectAttr -f Fingers_L.Mid_Spread_A FKExtraMiddleFinger1_L.rotateY;
	connectAttr -f Fingers_L.Pinky_Spread_C FKExtraPinkyFinger3_L.rotateY;
	connectAttr -f Fingers_L.Pinky_Spread_B FKExtraPinkyFinger2_L.rotateY;
	connectAttr -f Fingers_L.Pinky_Spread_A FKExtraPinkyFinger1_L.rotateY;
	connectAttr -f Fingers_L.Ring_Spread_C FKExtraRingFinger3_L.rotateY;
	connectAttr -f Fingers_L.Ring_Spread_B FKExtraRingFinger2_L.rotateY;
	connectAttr -f Fingers_L.Ring_Spread_A FKExtraRingFinger1_L.rotateY;

	connectAttr -f Fingers_R.Point_Spread_A FKExtraIndexFinger1_R.rotateY;
	connectAttr -f Fingers_R.Point_Spread_B FKExtraIndexFinger2_R.rotateY;
	connectAttr -f Fingers_R.Point_Spread_C FKExtraIndexFinger3_R.rotateY;
	connectAttr -f Fingers_R.Thumb_Spread_A FKExtraThumbFinger1_R.rotateY;
	connectAttr -f Fingers_R.Thumb_Spread_B FKExtraThumbFinger2_R.rotateY;
	connectAttr -f Fingers_R.Thumb_Spread_C FKExtraThumbFinger3_R.rotateY;
	connectAttr -f Fingers_R.Mid_Spread_C FKExtraMiddleFinger3_R.rotateY;
	connectAttr -f Fingers_R.Mid_Spread_B FKExtraMiddleFinger2_R.rotateY;
	connectAttr -f Fingers_R.Mid_Spread_A FKExtraMiddleFinger1_R.rotateY;
	connectAttr -f Fingers_R.Pinky_Spread_C FKExtraPinkyFinger3_R.rotateY;
	connectAttr -f Fingers_R.Pinky_Spread_B FKExtraPinkyFinger2_R.rotateY;
	connectAttr -f Fingers_R.Pinky_Spread_A FKExtraPinkyFinger1_R.rotateY;
	connectAttr -f Fingers_R.Ring_Spread_C FKExtraRingFinger3_R.rotateY;
	connectAttr -f Fingers_R.Ring_Spread_B FKExtraRingFinger2_R.rotateY;
	connectAttr -f Fingers_R.Ring_Spread_A FKExtraRingFinger1_R.rotateY;


}

global proc fingerConnectTwist()
{
	connectAttr -f Fingers_L.Point_Twist_A FKExtraIndexFinger1_L.rotateX;
	connectAttr -f Fingers_L.Point_Twist_B FKExtraIndexFinger2_L.rotateX;
	connectAttr -f Fingers_L.Point_Twist_C FKExtraIndexFinger3_L.rotateX;
	connectAttr -f Fingers_L.Thumb_Twist_A FKExtraThumbFinger1_L.rotateX;
	connectAttr -f Fingers_L.Thumb_Twist_B FKExtraThumbFinger2_L.rotateX;
	connectAttr -f Fingers_L.Thumb_Twist_C FKExtraThumbFinger3_L.rotateX;
	connectAttr -f Fingers_L.Mid_Twist_C FKExtraMiddleFinger3_L.rotateX;
	connectAttr -f Fingers_L.Mid_Twist_B FKExtraMiddleFinger2_L.rotateX;
	connectAttr -f Fingers_L.Mid_Twist_A FKExtraMiddleFinger1_L.rotateX;
	connectAttr -f Fingers_L.Pinky_Twist_C FKExtraPinkyFinger3_L.rotateX;
	connectAttr -f Fingers_L.Pinky_Twist_B FKExtraPinkyFinger2_L.rotateX;
	connectAttr -f Fingers_L.Pinky_Twist_A FKExtraPinkyFinger1_L.rotateX;
	connectAttr -f Fingers_L.Ring_Twist_C FKExtraRingFinger3_L.rotateX;
	connectAttr -f Fingers_L.Ring_Twist_B FKExtraRingFinger2_L.rotateX;
	connectAttr -f Fingers_L.Ring_Twist_A FKExtraRingFinger1_L.rotateX;


	connectAttr -f Fingers_R.Point_Twist_A FKExtraIndexFinger1_R.rotateX;
	connectAttr -f Fingers_R.Point_Twist_B FKExtraIndexFinger2_R.rotateX;
	connectAttr -f Fingers_R.Point_Twist_C FKExtraIndexFinger3_R.rotateX;
	connectAttr -f Fingers_R.Thumb_Twist_A FKExtraThumbFinger1_R.rotateX;
	connectAttr -f Fingers_R.Thumb_Twist_B FKExtraThumbFinger2_R.rotateX;
	connectAttr -f Fingers_R.Thumb_Twist_C FKExtraThumbFinger3_R.rotateX;
	connectAttr -f Fingers_R.Mid_Twist_C FKExtraMiddleFinger3_R.rotateX;
	connectAttr -f Fingers_R.Mid_Twist_B FKExtraMiddleFinger2_R.rotateX;
	connectAttr -f Fingers_R.Mid_Twist_A FKExtraMiddleFinger1_R.rotateX;
	connectAttr -f Fingers_R.Pinky_Twist_C FKExtraPinkyFinger3_R.rotateX;
	connectAttr -f Fingers_R.Pinky_Twist_B FKExtraPinkyFinger2_R.rotateX;
	connectAttr -f Fingers_R.Pinky_Twist_A FKExtraPinkyFinger1_R.rotateX;
	connectAttr -f Fingers_R.Ring_Twist_C FKExtraRingFinger3_R.rotateX;
	connectAttr -f Fingers_R.Ring_Twist_B FKExtraRingFinger2_R.rotateX;
	connectAttr -f Fingers_R.Ring_Twist_A FKExtraRingFinger1_R.rotateX;


}

global proc fingerConnectStretch()
{
	connectAttr -f Fingers_L.Point_Stretch_A FKExtraIndexFinger1_L.translateX;
	connectAttr -f Fingers_L.Point_Stretch_B FKExtraIndexFinger2_L.translateX;
	connectAttr -f Fingers_L.Point_Stretch_C FKExtraIndexFinger3_L.translateX;
	connectAttr -f Fingers_L.Thumb_Stretch_A FKExtraThumbFinger1_L.translateX;
	connectAttr -f Fingers_L.Thumb_Stretch_B FKExtraThumbFinger2_L.translateX;
	connectAttr -f Fingers_L.Thumb_Stretch_C FKExtraThumbFinger3_L.translateX;
	connectAttr -f Fingers_L.Mid_Stretch_C FKExtraMiddleFinger3_L.translateX;
	connectAttr -f Fingers_L.Mid_Stretch_B FKExtraMiddleFinger2_L.translateX;
	connectAttr -f Fingers_L.Mid_Stretch_A FKExtraMiddleFinger1_L.translateX;
	connectAttr -f Fingers_L.Pinky_Stretch_C FKExtraPinkyFinger3_L.translateX;
	connectAttr -f Fingers_L.Pinky_Stretch_B FKExtraPinkyFinger2_L.translateX;
	connectAttr -f Fingers_L.Pinky_Stretch_A FKExtraPinkyFinger1_L.translateX;
	connectAttr -f Fingers_L.Ring_Stretch_C FKExtraRingFinger3_L.translateX;
	connectAttr -f Fingers_L.Ring_Stretch_B FKExtraRingFinger2_L.translateX;
	connectAttr -f Fingers_L.Ring_Stretch_A FKExtraRingFinger1_L.translateX;


	connectAttr -f Fingers_R.Point_Stretch_A FKExtraIndexFinger1_R.translateX;
	connectAttr -f Fingers_R.Point_Stretch_B FKExtraIndexFinger2_R.translateX;
	connectAttr -f Fingers_R.Point_Stretch_C FKExtraIndexFinger3_R.translateX;
	connectAttr -f Fingers_R.Thumb_Stretch_A FKExtraThumbFinger1_R.translateX;
	connectAttr -f Fingers_R.Thumb_Stretch_B FKExtraThumbFinger2_R.translateX;
	connectAttr -f Fingers_R.Thumb_Stretch_C FKExtraThumbFinger3_R.translateX;
	connectAttr -f Fingers_R.Mid_Stretch_C FKExtraMiddleFinger3_R.translateX;
	connectAttr -f Fingers_R.Mid_Stretch_B FKExtraMiddleFinger2_R.translateX;
	connectAttr -f Fingers_R.Mid_Stretch_A FKExtraMiddleFinger1_R.translateX;
	connectAttr -f Fingers_R.Pinky_Stretch_C FKExtraPinkyFinger3_R.translateX;
	connectAttr -f Fingers_R.Pinky_Stretch_B FKExtraPinkyFinger2_R.translateX;
	connectAttr -f Fingers_R.Pinky_Stretch_A FKExtraPinkyFinger1_R.translateX;
	connectAttr -f Fingers_R.Ring_Stretch_C FKExtraRingFinger3_R.translateX;
	connectAttr -f Fingers_R.Ring_Stretch_B FKExtraRingFinger2_R.translateX;
	connectAttr -f Fingers_R.Ring_Stretch_A FKExtraRingFinger1_R.translateX;


}

//Finishing tool

global proc VisControl()
{

	columnLayout -adj true;
	text " ";
	text "Create the Visibility control";
	text " ";
	columnLayout -adj true;
    button -h 50 -w 250 -label "Create Visibility Control" -command "VisControlAdd" -bgc .0 .3 .5;
    text " ";

    columnLayout -adj on ;
    separator -st "in";
    text -l "Additional Attributes" -fn "boldLabelFont" -h 20;
    //separator -st "in";
    rowColumnLayout -nc 6 ;

    checkBox -l "Cloth Controls" -h 20 -onc "Con" -ofc "Coff" -v 0;
    checkBox -l "Hair Controls" -h 20 -onc "Hon" -ofc "Hoff" -v 0;

    setParent -u;
	setParent..;

	columnLayout -adj on ;
    separator -st "in";
    text -l "Remove Attributes" -fn "boldLabelFont" -h 20;
    //separator -st "in";
    rowColumnLayout -nc 6 ;

    checkBox -l "RigLevel" -h 20  -ofc "Roff" -v 1;
    //checkBox -l "Hair Controls" -h 20 -onc "Hon" -ofc "Hoff" -v 0;

    setParent -u;
	setParent..;

	text " ";
	columnLayout -adj true;
	separator -st "in";
	text  -l " Connect Attributes  " -fn "boldLabelFont" -h 20;
	text " " ;
	rowColumnLayout -nc 2 ;
    button -h 50 -w 150 -label "MeshRes to model" -command "ConMeshRes" -bgc .1 .8 0;
    button -h 50 -w 150 -label "MeshDisplay to model" -command "ConMeshDis" -bgc .2 .7 0;
    button -h 50 -w 150 -label "BodyControls to Curve" -command "ConBC" -bgc .3 .6 0;
    button -h 50 -w 150 -label "SecondaryControls to Curve" -command "ConSC" -bgc .4 .5 0;
    button -h 50 -w 150 -label "ToonyControls to Curve" -command "ConTC" -bgc .5 .4 0;
    button -h 50 -w 150 -label "FacialControls to Curve" -command "ConFC" -bgc .6 .3 0;
    button -h 50 -w 150 -label "ClothControls to Curve" -command "ConCC" -bgc .7 .2 0;
	button -h 50 -w 150 -label "HairControls to Curve" -command "ConHC" -bgc .8 .1 0;
	button -h 50 -w 150 -label "Bones Vis ON" -command "BoneVisON" -bgc .7 .2 0;
	button -h 50 -w 150 -label "Bones Vis OFF" -command "BoneVisOFF" -bgc .8 .1 0;


    text " ";



}


global proc VisControlAdd()
{

	string $contrl[] = `textCurves  -ch 0 -f "Times New Roman|h-13|w400|c0" -t "V"`;
	CenterPivot;
	rename  Text_V_1|Char_V_1|curve10 "Visibility";
	parent -world Visibility ;
	delete Text_V_1;

	setAttr -lock true -keyable false -channelBox false "Visibility.tx";
	setAttr -lock true -keyable false -channelBox false "Visibility.ty";
	setAttr -lock true -keyable false -channelBox false "Visibility.tz";
	setAttr -lock true -keyable false -channelBox false "Visibility.rx";
	setAttr -lock true -keyable false -channelBox false "Visibility.ry";
	setAttr -lock true -keyable false -channelBox false "Visibility.rz";
	setAttr -lock true -keyable false -channelBox false "Visibility.sx";
	setAttr -lock true -keyable false -channelBox false "Visibility.sy";
	setAttr -lock true -keyable false -channelBox false "Visibility.sz";
	setAttr -lock true -keyable false -channelBox false "Visibility.v";


	addAttr -ln "MeshSetting"  -at "enum" -en "***************"  Visibility;
	setAttr -e -channelBox true Visibility.MeshSetting;

	addAttr -ln "MeshRes"  -at "enum" -en "LOW:HIGH:"  Visibility;
	setAttr -e -channelBox true Visibility.MeshRes;
	addAttr -ln "MeshDisplay"  -at "enum" -en "Normal:Template:Reference"  Visibility;
	setAttr -e  -channelBox true Visibility.MeshDisplay;

	addAttr -ln "RigLevel"  -at "enum" -en "***************"  Visibility;
	setAttr -e -channelBox true Visibility.RigLevel;

	addAttr -ln "Riglevel"  -at "enum" -en "0:1:"  Visibility;
	setAttr -e -channelBox true Visibility.Riglevel;

	addAttr -ln "ControlSetting"  -at "enum" -en "***************"  Visibility;
	setAttr -e -channelBox true Visibility.ControlSetting;

	addAttr -ln "BodyControls"  -at "enum" -en "OFF:ON:"  Visibility;
	setAttr -e -channelBox true Visibility.BodyControls;
	addAttr -ln "SecondaryControls"  -at "enum" -en "OFF:ON:"  Visibility;
	setAttr -e -channelBox true Visibility.SecondaryControls;
	addAttr -ln "ToonyControls"  -at "enum" -en "OFF:ON:"  Visibility;
	setAttr -e  -channelBox true Visibility.ToonyControls;
	addAttr -ln "FacialControls"  -at "enum" -en "OFF:ON:"  Visibility;
	setAttr -e -channelBox true Visibility.FacialControls;

}



	global proc Con()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
     	addAttr -ln "ClothControls"  -at "enum" -en "OFF:ON:"  Visibility;
		setAttr -e  -channelBox true Visibility.ClothControls;

    }
}

	global proc Hon()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
     	addAttr -ln "HairControls"  -at "enum" -en "OFF:ON:"  Visibility;
		setAttr -e -channelBox true Visibility.HairControls;

    }
}

	global proc Coff()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
     	catch (`deleteAttr -attribute "ClothControls" "Visibility"`);

    }
}

	global proc Hoff()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
     	catch (`deleteAttr -attribute "HairControls" "Visibility"`);

    }
}

	global proc Roff()
{
    string $sel[] = `ls -sl`;
    for ($selection in $sel)
    {
     	catch (`deleteAttr -attribute "RigLevel" "Visibility"`);
		catch (`deleteAttr -attribute "Riglevel" "Visibility"`);

    }
}


global proc ConMeshDis()

{
	string $selection[]= `ls -sl -dag -lf`;

	for($each in $selection)
		{

			setAttr ($each + ".overrideEnabled" )1;
			connectAttr -f Visibility.MeshDisplay ($each + ".overrideDisplayType");


		}
}


global proc ConMeshRes()

{
	string $selection[]= `ls -sl`;

	for($each in $selection)
		{


			connectAttr -f Visibility.MeshRes ($each + ".divisions");


		}
}


global proc ConBC()

{
	string $selection[]= `ls -sl -dag -lf`;

	for($each in $selection)
		{


			connectAttr -f Visibility.BodyControls ($each + ".visibility");


		}
}

global proc ConSC()

{
	string $selection[]= `ls -sl -dag -lf`;

	for($each in $selection)
		{


			connectAttr -f Visibility.SecondaryControls ($each + ".visibility");


		}
}

global proc ConTC()

{
	string $selection[]= `ls -sl -dag -lf`;

	for($each in $selection)
		{


			connectAttr -f Visibility.ToonyControls ($each + ".visibility");


		}
}

global proc ConFC()

{
	string $selection[]= `ls -sl -dag -lf`;

	for($each in $selection)
		{


			connectAttr -f Visibility.FacialControls ($each + ".visibility");


		}
}

global proc ConCC()

{
	string $selection[]= `ls -sl -dag -lf`;

	for($each in $selection)
		{


			connectAttr -f Visibility.ClothControls ($each + ".visibility");


		}
}

global proc ConHC()

{
	string $selection[]= `ls -sl -dag -lf`;

	for($each in $selection)
		{


			connectAttr -f Visibility.HairControls ($each + ".visibility");


		}
}



global proc BoneVisON()
{
	string $sel[] = `ls -sl`;
	for ($selection in $sel)
	{
	setAttr ($selection + ".drawStyle") 0;


	}
}

global proc BoneVisOFF()
{
	string $sel[] = `ls -sl`;
	for ($selection in $sel)
	{
	setAttr ($selection + ".drawStyle") 2;


	}
}


global proc creaturerig()
{

	columnLayout -adj true;
	text " ";
	text -fn "boldLabelFont" -l "Advance Creature Rig for 4leg";
	text " ";
	columnLayout -adj true;
    button -h 50 -w 250 -label "Clamp To Root Control " -command "clampNode2Root" -bgc .5 .5 .5;
	columnLayout -adj true;
	separator -st "in";
	text  -l " Auto Scapula To Front Legs  " -fn "boldLabelFont" -h 20;
	text " " ;
	rowColumnLayout -nc 2 ;
    button -h 50 -w 150 -label "1. Primary setup" -command "scapulaAutoScapPri" -bgc .1 .8 0;
    button -h 50 -w 150 -label "2. Create & adjust Scapula Joint" -command "scapulaCreateScap" -bgc .5 .7 .5;
    button -h 50 -w 150 -label "3. Setup " -command "scapulaSetup" -bgc .3 .6 1;
    button -h 50 -w 150 -label "4. Adjust position of PV Group " -command "scapulaPoleAdj " -bgc .4 .5 0;
    setParent -u;
	setParent..;
    columnLayout  -adj true;
    button -h 50 -w 150 -label "5. Finish The Setup for Left Leg" -command "scapulaLegFinish" -bgc 1 1 1;
    separator -st "in";

    columnLayout -adj true;
	text " ";
	text -fn "boldLabelFont" -l "Link New Joints";
	text " ";
	text "Note: Duplicate the necessary joints for Skining";
	text "Rename with Suffix XZ & Select the entire Joints";
    columnLayout  -adj true;
    button -h 50 -w 150 -label "Link Joint Setup" -command "linkJointSetup" -bgc 1 0 1;


    columnLayout -adj true;
	text " ";
	text -fn "boldLabelFont" -l "Create toony for 2Legged";
	text " ";
	text "Note: this setup will work only with elbow Twist joints(2 value)";
    columnLayout  -adj true;
    button -h 50 -w 150 -label "Toony setup for 2Leg Character" -command "addToonSetup" -bgc 1 0 1;



}

global proc clampNode2Root()

{

    addAttr -ln "Clamp"  -at double  -min 0 -max 10 -dv 1 |rig|worldA_ctrl|worldB_ctrl|controls_grp|spineParts_grp|frzRoot_grp|root_ctrl;
    setAttr -e-keyable true |rig|worldA_ctrl|worldB_ctrl|controls_grp|spineParts_grp|frzRoot_grp|root_ctrl.Clamp;
    doGroup 0 1 1;
    rename "null1" "spinePull1_Dis";
    parent spinePull1_Dis hip_ctrl ;
    createNode joint;
    rename "joint1" "SpinePull1_jnt";
    $pos = `xform -q -ws -rp spineDef1_jnt`;
    move $pos[0] $pos[1] $pos[2] SpinePull1_jnt;
    move $pos[0] $pos[1] $pos[2] spinePull1_Dis;
    createNode joint;
    rename "joint1" "SpinePull2_jnt";
    $pos = `xform -q -ws -rp spine4_jnt`;
    move $pos[0] $pos[1] $pos[2] SpinePull2_jnt;
    parent SpinePull2_jnt SpinePull1_jnt ;
    select -r SpinePull1_jnt ;
    select -add SpinePull2_jnt ;
    ikHandle -sol ikRPsolver  ;
    rename "ikHandle1" "spinePull2_ikH";
    parent SpinePull1_jnt hip_ctrl ;
    parent spinePull2_ikH chest_ctrl ;
    select -cl  ;
    doGroup 0 1 1;
    rename "null1" "spinePull2_Dis";
    $pos = `xform -q -ws -rp chest_ctrl`;
    move $pos[0] $pos[1] $pos[2] spinePull2_Dis;
    parent spinePull2_Dis chest_ctrl ;
    createNode joint -n chest_proxy;
    $pos = `xform -q -ws -rp  chest_ctrl`;
    move $pos[0] $pos[1] $pos[2] chest_proxy;
    parent chest_proxy chest_ctrl ;
    parent chest_ctrl|endTwist_loc chest_proxy ;
    parent cluster4Handle chest_proxy ;
    parent cluster5Handle chest_proxy ;
    parent spinePull2_ikH chest_proxy ;
    parent spinePull2_Dis chest_proxy ;
    createNode distanceBetween -n spine_Dis;
    connectAttr -force spinePull2_Dis.worldMatrix[0] spine_Dis.inMatrix1;
    connectAttr -force spinePull1_Dis.worldMatrix[0] spine_Dis.inMatrix2;
    createNode multiplyDivide -n spineIk_MD;
    setAttr "spineIk_MD.operation" 2;
    connectAttr -force spine_Dis.distance spineIk_MD.input1X;
    createNode multiplyDivide -n spineIkScale_MD;
    setAttr "spineIkScale_MD.operation" 2;
    connectAttr -force worldScaleCon_grp.scaleX spineIkScale_MD.input2X;
    connectAttr -f spineIk_MD.outputX spineIkScale_MD.input1X;
    createNode pairBlend -n spineIk_PBSwitch;
    connectAttr -force root_ctrl.stretching spineIk_PBSwitch.weight;
    connectAttr -f spineIkScale_MD.outputX spineIk_PBSwitch.inTranslateX2;
    setAttr "spineIk_PBSwitch.inTranslateX1" 1;
    createNode clamp -n spineIk_clmp;
    connectAttr -f spineIk_PBSwitch.outTranslateX spineIk_clmp.inputR;
    connectAttr -f root_ctrl.Clamp spineIk_clmp.maxR;
    connectAttr -f spineIk_clmp.outputR SpinePull1_jnt.scaleZ;

    createNode clamp -n spineStIk_clmp;
    connectAttr -f root_ctrl.Clamp spineStIk_clmp.maxR;
    connectAttr -f stretchBlend_bta.output spineStIk_clmp.inputR;
    connectAttr -f spineStIk_clmp.outputR absMulti_md.input1X;

    select -r spine4_jnt_parentConstraint1 ;
    doDelete;
    select -r SpinePull2_jnt ;
    select -add spine4_jnt ;
    pointConstraint -mo -weight 1;
    select -r chest_proxy ;
    select -add spine4_jnt ;
    orientConstraint -mo -weight 1;

    $fa = `getAttr "spine_Dis.distance"`;
    print $fa;
    setAttr "spineIk_MD.input2X" $fa;

    setAttr "root_ctrl.Clamp" 1.5;



}

global proc scapulaAutoScapPri()

{
select -r spine4_jnt ;
source "wireShape.mel"; wireShape("joint");
rename "joint1" "ChestFK_ctrl";
setAttr "|ChestFK_ctrl.rotateZ" 0;
setAttr "|ChestFK_ctrl.rotateX" 0;
setAttr "|ChestFK_ctrl.rotateY" 0;
parent ChestFK_ctrl spine4_jnt ;
parent neck1_jnt ChestFK_ctrl ;
parent ltFrt_hip1_jnt ChestFK_ctrl ;
parent fk_ltFrt_hip1_jnt ChestFK_ctrl ;
parent ik_ltFrt_hip1_jnt ChestFK_ctrl ;
parent ltFrt_legFlex1_jnt ChestFK_ctrl ;
select -r ChestFK_ctrl ;
source "wireShape.mel"; wireShape("circleX");
select -r nurbsCircle1 ;pickWalk -d down;
select -add ChestFK_ctrl ;
parent -s -r ;
select -r nurbsCircleShape1.cv[0:7] ;
rotate -r -p 0cm 14cm 4cm -os 0 -90 0 ;
scale -r -p 0cm 14cm 4cm 4 4 4 ;
select -cl  ;

parent rtFrt_hip1_jnt ChestFK_ctrl ;
parent fk_rtFrt_hip1_jnt ChestFK_ctrl ;
parent ik_rtFrt_hip1_jnt ChestFK_ctrl ;
parent rtFrt_legFlex1_jnt ChestFK_ctrl ;
select -r nurbsCircle1 ;
doDelete ;
select -cl  ;
}

global proc scapulaCreateScap()
{
    createNode joint -n l_scapula_jnt;
    createNode joint -n l_scapula_ctrl;
    parent l_scapula_jnt l_scapula_ctrl ;

	createNode joint -n r_scapula_jnt;
    createNode joint -n r_scapula_ctrl;
    parent r_scapula_jnt r_scapula_ctrl ;
}

global proc scapulaSetup()
{
   select -r l_scapula_ctrl ;
source "wireShape.mel"; wireShape("cube");
select -r cube1 ;pickWalk -d down;
select -add l_scapula_ctrl ;
parent -s -r ;
select -r l_scapula_ctrl ;
source "zeroOut.mel"; zeroOut("");
source "zeroOut.mel"; zeroOut("");
rename "L_scapula_ctrl_offset_2" "L_scapula_ctrl_g";
rename "L_scapula_ctrl_offset" "frzL_scapula_ctrl";
parent frzL_scapula_ctrl ChestFK_ctrl ;
parent ltFrt_hip1_jnt l_scapula_jnt ;
parent fk_ltFrt_hip1_jnt l_scapula_jnt ;
parent ik_ltFrt_hip1_jnt l_scapula_jnt ;
parent ltFrt_legFlex1_jnt l_scapula_jnt ;
addAttr -ln "Auto_Scapula"  -at double  -min 0 -max 10 -dv 0 |rig|worldA_ctrl|worldB_ctrl|skeletons_grp|spine1_jnt|spine2_jnt|spine3_jnt|spine4_jnt|ChestFK_ctrl|frzL_scapula_ctrl|L_scapula_ctrl_g|l_scapula_ctrl;
setAttr -e-keyable true |rig|worldA_ctrl|worldB_ctrl|skeletons_grp|spine1_jnt|spine2_jnt|spine3_jnt|spine4_jnt|ChestFK_ctrl|frzL_scapula_ctrl|L_scapula_ctrl_g|l_scapula_ctrl.Auto_Scapula;
addAttr -ln "Auto_Translate"  -at double  -min 0 -max 10 -dv 0 |rig|worldA_ctrl|worldB_ctrl|skeletons_grp|spine1_jnt|spine2_jnt|spine3_jnt|spine4_jnt|ChestFK_ctrl|frzL_scapula_ctrl|L_scapula_ctrl_g|l_scapula_ctrl;
setAttr -e-keyable true |rig|worldA_ctrl|worldB_ctrl|skeletons_grp|spine1_jnt|spine2_jnt|spine3_jnt|spine4_jnt|ChestFK_ctrl|frzL_scapula_ctrl|L_scapula_ctrl_g|l_scapula_ctrl.Auto_Translate;
CreateEmptyGroup; rename "null1" "l_ScapulaTransDis1_g";
CreateEmptyGroup; rename "null1" "l_ScapulaTransDis2_g";
$pos = `xform -q -ws -rp ltFrt_foot_ctrl`;
move $pos[0] $pos[1] $pos[2] l_ScapulaTransDis2_g;
select -r ltFrt_foot_ctrl ;
select -add l_ScapulaTransDis2_g ;
parentConstraint -mo -weight 1;
$pos = `xform -q -ws -rp l_scapula_ctrl`;
move $pos[0] $pos[1] $pos[2] l_ScapulaTransDis1_g;
select -r ChestFK_ctrl ;
select -add l_ScapulaTransDis1_g ;
parentConstraint -mo -weight 1;
parent l_ScapulaTransDis1_g worldScaleCon_grp ;
parent l_ScapulaTransDis2_g worldScaleCon_grp ;
createNode distanceBetween -n l_ScapulaTrans1_Dis;
connectAttr -f l_ScapulaTransDis1_g.translate l_ScapulaTrans1_Dis.point1;
connectAttr -f l_ScapulaTransDis2_g.translate l_ScapulaTrans1_Dis.point2;
createNode multiplyDivide -n l_ScapulaTrans_md;
connectAttr -f l_ScapulaTrans_md.outputX L_scapula_ctrl_g.translateY;
connectAttr -f l_scapula_ctrl.Auto_Translate l_ScapulaTrans_md.input2X;
select -r l_scapula_jnt ;
source "wireShape.mel"; wireShape("joint");
rename "joint1" "l_ScapulaAim1_jnt1";
select -r ltFrt_foot_ctrl ;
source "wireShape.mel"; wireShape("joint");
rename "joint1" "l_ScapulaAim1_jnt2";
parent l_ScapulaAim1_jnt2 l_ScapulaAim1_jnt1 ;
parent l_ScapulaAim1_jnt1 spine4_jnt;
select -r l_ScapulaAim1_jnt1 ;
select -add l_ScapulaAim1_jnt2 ;
ikHandle -sol ikRPsolver;
parent ikHandle1 ltFrt_foot_ctrl ;
rename "ikHandle1" "l_ScapulaAim1_ikH";
select -r cube1 ;
doDelete ;

select -r r_scapula_ctrl ;
source "wireShape.mel"; wireShape("cube");
select -r cube1 ;pickWalk -d down;
select -add r_scapula_ctrl ;
parent -s -r ;
select -r r_scapula_ctrl ;
source "zeroOut.mel"; zeroOut("");
source "zeroOut.mel"; zeroOut("");
rename "R_scapula_ctrl_offset_2" "R_scapula_ctrl_g";
rename "R_scapula_ctrl_offset" "frzR_scapula_ctrl";
parent frzR_scapula_ctrl ChestFK_ctrl ;
parent rtFrt_hip1_jnt r_scapula_jnt ;
parent fk_rtFrt_hip1_jnt r_scapula_jnt ;
parent ik_rtFrt_hip1_jnt r_scapula_jnt ;
parent rtFrt_legFlex1_jnt r_scapula_jnt ;
addAttr -ln "Auto_Scapula"  -at double  -min 0 -max 10 -dv 0 |rig|worldA_ctrl|worldB_ctrl|skeletons_grp|spine1_jnt|spine2_jnt|spine3_jnt|spine4_jnt|ChestFK_ctrl|frzR_scapula_ctrl|R_scapula_ctrl_g|r_scapula_ctrl;
setAttr -e-keyable true |rig|worldA_ctrl|worldB_ctrl|skeletons_grp|spine1_jnt|spine2_jnt|spine3_jnt|spine4_jnt|ChestFK_ctrl|frzR_scapula_ctrl|R_scapula_ctrl_g|r_scapula_ctrl.Auto_Scapula;
addAttr -ln "Auto_Translate"  -at double  -min 0 -max 10 -dv 0 |rig|worldA_ctrl|worldB_ctrl|skeletons_grp|spine1_jnt|spine2_jnt|spine3_jnt|spine4_jnt|ChestFK_ctrl|frzR_scapula_ctrl|R_scapula_ctrl_g|r_scapula_ctrl;
setAttr -e-keyable true |rig|worldA_ctrl|worldB_ctrl|skeletons_grp|spine1_jnt|spine2_jnt|spine3_jnt|spine4_jnt|ChestFK_ctrl|frzR_scapula_ctrl|R_scapula_ctrl_g|r_scapula_ctrl.Auto_Translate;
CreateEmptyGroup; rename "null1" "r_ScapulaTransDis1_g";
CreateEmptyGroup; rename "null1" "r_ScapulaTransDis2_g";
$pos = `xform -q -ws -rp rtFrt_foot_ctrl`;
move $pos[0] $pos[1] $pos[2] r_ScapulaTransDis2_g;
select -r rtFrt_foot_ctrl ;
select -add r_ScapulaTransDis2_g ;
parentConstraint -mo -weight 1;
$pos = `xform -q -ws -rp r_scapula_ctrl`;
move $pos[0] $pos[1] $pos[2] r_ScapulaTransDis1_g;
select -r ChestFK_ctrl ;
select -add r_ScapulaTransDis1_g ;
parentConstraint -mo -weight 1;
parent r_ScapulaTransDis1_g worldScaleCon_grp ;
parent r_ScapulaTransDis2_g worldScaleCon_grp ;
createNode distanceBetween -n r_ScapulaTrans1_Dis;
connectAttr -f r_ScapulaTransDis1_g.translate r_ScapulaTrans1_Dis.point1;
connectAttr -f r_ScapulaTransDis2_g.translate r_ScapulaTrans1_Dis.point2;
createNode multiplyDivide -n r_ScapulaTrans_md;
connectAttr -f r_ScapulaTrans_md.outputX R_scapula_ctrl_g.translateY;
connectAttr -f r_scapula_ctrl.Auto_Translate r_ScapulaTrans_md.input2X;
select -r r_scapula_jnt ;
source "wireShape.mel"; wireShape("joint");
rename "joint1" "r_ScapulaAim1_jnt1";
select -r rtFrt_foot_ctrl ;
source "wireShape.mel"; wireShape("joint");
rename "joint1" "r_ScapulaAim1_jnt2";
parent r_ScapulaAim1_jnt2 r_ScapulaAim1_jnt1 ;
parent r_ScapulaAim1_jnt1 spine4_jnt;
select -r r_ScapulaAim1_jnt1 ;
select -add r_ScapulaAim1_jnt2 ;
ikHandle -sol ikRPsolver;
parent ikHandle1 rtFrt_foot_ctrl ;
rename "ikHandle1" "r_ScapulaAim1_ikH";
select -r cube1 ;
doDelete ;


select -r ltBck_legOffset_ctrl ;
source "wireShape.mel"; wireShape("joint");
rename "joint1" "ltBck_PV_jnt1";
select -r ltBck_foot_ctrl ;
source "wireShape.mel"; wireShape("joint");
rename "joint1" "ltBck_PV_jnt2";
parent ltBck_PV_jnt2 ltBck_PV_jnt1 ;
parent ltBck_PV_jnt1 ltBck_legOffset_ctrl;
select -r  ltBck_PV_jnt1 ;
select -add ltBck_PV_jnt2 ;
ikHandle -sol ikRPsolver;
parent ikHandle1 ltBck_foot_ctrl ;
rename "ikHandle1" "ltBck_PV_ikH";
parent frzLtBck_knee_grp ltBck_PV_jnt1 ;
select -r frzLtBck_knee_grp_parentConstraint1 ;
delete;


select -r rtBck_legOffset_ctrl ;
source "wireShape.mel"; wireShape("joint");
rename "joint1" "rtBck_PV_jnt1";
select -r rtBck_foot_ctrl ;
source "wireShape.mel"; wireShape("joint");
rename "joint1" "rtBck_PV_jnt2";
parent rtBck_PV_jnt2 rtBck_PV_jnt1 ;
parent rtBck_PV_jnt1 rtBck_legOffset_ctrl;
select -r  rtBck_PV_jnt1 ;
select -add rtBck_PV_jnt2 ;
ikHandle -sol ikRPsolver;
parent ikHandle1 rtBck_foot_ctrl ;
rename "ikHandle1" "rtBck_PV_ikH";
parent frzRtBck_knee_grp rtBck_PV_jnt1 ;
select -r frzRtBck_knee_grp_parentConstraint1 ;
delete;

setAttr "ltBck_PV_ikH.visibility" 0;
setAttr -lock true -keyable false -channelBox false "ltBck_PV_ikH.v";
setAttr "rtBck_PV_ikH.visibility" 0;
setAttr -lock true -keyable false -channelBox false "rtBck_PV_ikH.v";
setAttr "ltBck_PV_jnt1.drawStyle" 2;
setAttr "ltBck_PV_jnt2.drawStyle" 2;
setAttr "rtBck_PV_jnt1.drawStyle" 2;
setAttr "rtBck_PV_jnt2.drawStyle" 2;


}

global proc scapulaPoleAdj()

{
    select -r l_scapula_jnt ;
    source "wireShape.mel"; wireShape("null");
    rename "grp1" "l_ScapulaAim1_PV";
    parent l_ScapulaAim1_PV spine4_jnt ;

	select -r r_scapula_jnt ;
    source "wireShape.mel"; wireShape("null");
    rename "grp1" "r_ScapulaAim1_PV";
    parent r_ScapulaAim1_PV spine4_jnt ;
    select -r l_ScapulaAim1_PV r_ScapulaAim1_PV ;
}

global proc scapulaLegFinish()

{

select -r l_ScapulaAim1_PV ;
select -add l_ScapulaAim1_ikH ;
poleVectorConstraint -weight 1;
select -r ChestFK_ctrl ;
select -add l_ScapulaAim1_jnt1 ;
select -add L_scapula_ctrl_g ;
parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z -weight 1;
setAttr "L_scapula_ctrl_g_parentConstraint1.l_ScapulaAim1_jnt1W1" .5;
setAttr "L_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0" .5;
setAttr "L_scapula_ctrl_g_parentConstraint1.interpType" 2;
CBunlockAttr "frzLtFrt_legOffset_grp.tx";
CBunlockAttr "frzLtFrt_legOffset_grp.ty";
CBunlockAttr "frzLtFrt_legOffset_grp.tz";
CBunlockAttr "frzLtFrt_legOffset_grp.rx";
CBunlockAttr "frzLtFrt_legOffset_grp.ry";
CBunlockAttr "frzLtFrt_legOffset_grp.rz";
CBunlockAttr "frzLtFrt_legOffset_grp.sx";
CBunlockAttr "frzLtFrt_legOffset_grp.sy";
CBunlockAttr "frzLtFrt_legOffset_grp.sz";
CBunlockAttr "frzLtFrt_legOffset_grp.v";
select -r frzLtFrt_legOffset_grp_parentConstraint1 ;
doDelete;
select -r l_scapula_jnt ;
select -add frzLtFrt_legOffset_grp ;
parentConstraint -mo -weight 1;
setAttr "l_ScapulaTrans_md.input1X" 0;
setDrivenKeyframe -currentDriver l_ScapulaTrans1_Dis.distance l_ScapulaTrans_md.input1X;
setAttr "ltFrt_foot_ctrl.translateY" .2;
setAttr "l_ScapulaTrans_md.input1X" 0;
setDrivenKeyframe -currentDriver l_ScapulaTrans1_Dis.distance l_ScapulaTrans_md.input1X;
setAttr "ltFrt_foot_ctrl.translateY" 6;
setAttr "l_ScapulaTrans_md.input1X" .2;
setDrivenKeyframe -currentDriver l_ScapulaTrans1_Dis.distance l_ScapulaTrans_md.input1X;
setAttr "ltFrt_foot_ctrl.translateY" 0;
//setAttr "L_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0" 0;
//setAttr "L_scapula_ctrl_g_parentConstraint1.l_ScapulaAim1_jnt1W1" 1;
//setDrivenKeyframe -currentDriver l_scapula_ctrl.Auto_Scapula L_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0;
//setDrivenKeyframe -currentDriver l_scapula_ctrl.Auto_Scapula L_scapula_ctrl_g_parentConstraint1.l_ScapulaAim1_jnt1W1;
setAttr "l_scapula_ctrl.Auto_Scapula" 0;
setAttr "L_scapula_ctrl_g_parentConstraint1.l_ScapulaAim1_jnt1W1" 0;
setAttr "L_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0" 1;
setDrivenKeyframe -currentDriver l_scapula_ctrl.Auto_Scapula L_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0;
setDrivenKeyframe -currentDriver l_scapula_ctrl.Auto_Scapula L_scapula_ctrl_g_parentConstraint1.l_ScapulaAim1_jnt1W1;
setAttr "l_scapula_ctrl.Auto_Scapula" 10;
setAttr "L_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0" 0;
setAttr "L_scapula_ctrl_g_parentConstraint1.l_ScapulaAim1_jnt1W1" 1;
setDrivenKeyframe -currentDriver l_scapula_ctrl.Auto_Scapula L_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0;
setDrivenKeyframe -currentDriver l_scapula_ctrl.Auto_Scapula L_scapula_ctrl_g_parentConstraint1.l_ScapulaAim1_jnt1W1;
CBunlockAttr "frzLtFrt_knee_grp.tx";
CBunlockAttr "frzLtFrt_knee_grp.ty";
CBunlockAttr "frzLtFrt_knee_grp.tz";
CBunlockAttr "frzLtFrt_knee_grp.rx";
CBunlockAttr "frzLtFrt_knee_grp.ry";
CBunlockAttr "frzLtFrt_knee_grp.rz";
CBunlockAttr "frzLtFrt_knee_grp.sx";
CBunlockAttr "frzLtFrt_knee_grp.sy";
CBunlockAttr "frzLtFrt_knee_grp.sz";
CBunlockAttr "frzLtFrt_knee_grp.v";
select -r frzLtFrt_knee_grp_parentConstraint1 ;
doDelete;
parent frzLtFrt_knee_grp l_ScapulaAim1_jnt1 ;
setAttr "ChestFK_ctrl.overrideEnabled" 1;
setAttr "l_ScapulaAim1_ikH.visibility" 0;
setAttr -lock true "l_ScapulaAim1_ikH.v";
setAttr "ltFrt_knee_ctrl.overrideEnabled" 1;
setAttr "l_ScapulaAim1_jnt2.drawStyle" 2;
setAttr "l_ScapulaAim1_jnt1.drawStyle" 2;


select -r r_ScapulaAim1_PV ;
select -add r_ScapulaAim1_ikH ;
poleVectorConstraint -weight 1;
select -r ChestFK_ctrl ;
select -add r_ScapulaAim1_jnt1 ;
select -add R_scapula_ctrl_g ;
parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z -weight 1;
setAttr "R_scapula_ctrl_g_parentConstraint1.r_ScapulaAim1_jnt1W1" .5;
setAttr "R_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0" .5;
setAttr "R_scapula_ctrl_g_parentConstraint1.interpType" 2;
CBunlockAttr "frzRtFrt_legOffset_grp.tx";
CBunlockAttr "frzRtFrt_legOffset_grp.ty";
CBunlockAttr "frzRtFrt_legOffset_grp.tz";
CBunlockAttr "frzRtFrt_legOffset_grp.rx";
CBunlockAttr "frzRtFrt_legOffset_grp.ry";
CBunlockAttr "frzRtFrt_legOffset_grp.rz";
CBunlockAttr "frzRtFrt_legOffset_grp.sx";
CBunlockAttr "frzRtFrt_legOffset_grp.sy";
CBunlockAttr "frzRtFrt_legOffset_grp.sz";
CBunlockAttr "frzRtFrt_legOffset_grp.v";
select -r frzRtFrt_legOffset_grp_parentConstraint1 ;
doDelete;
select -r r_scapula_jnt ;
select -add frzRtFrt_legOffset_grp ;
parentConstraint -mo -weight 1;
setAttr "r_ScapulaTrans_md.input1X" 0;
setDrivenKeyframe -currentDriver r_ScapulaTrans1_Dis.distance r_ScapulaTrans_md.input1X;
setAttr "rtFrt_foot_ctrl.translateY" .2;
setAttr "r_ScapulaTrans_md.input1X" 0;
setDrivenKeyframe -currentDriver r_ScapulaTrans1_Dis.distance r_ScapulaTrans_md.input1X;
setAttr "rtFrt_foot_ctrl.translateY" 6;
setAttr "r_ScapulaTrans_md.input1X" .2;
setDrivenKeyframe -currentDriver r_ScapulaTrans1_Dis.distance r_ScapulaTrans_md.input1X;
setAttr "rtFrt_foot_ctrl.translateY" 0;
//setAttr "R_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0" 0;
//setAttr "R_scapula_ctrl_g_parentConstraint1.r_ScapulaAim1_jnt1W1" 1;
//setDrivenKeyframe -currentDriver r_scapula_ctrl.Auto_Scapula R_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0;
//setDrivenKeyframe -currentDriver r_scapula_ctrl.Auto_Scapula R_scapula_ctrl_g_parentConstraint1.r_ScapulaAim1_jnt1W1;
setAttr "r_scapula_ctrl.Auto_Scapula" 0;
setAttr "R_scapula_ctrl_g_parentConstraint1.r_ScapulaAim1_jnt1W1" 0;
setAttr "R_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0" 1;
setDrivenKeyframe -currentDriver r_scapula_ctrl.Auto_Scapula R_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0;
setDrivenKeyframe -currentDriver r_scapula_ctrl.Auto_Scapula R_scapula_ctrl_g_parentConstraint1.r_ScapulaAim1_jnt1W1;
setAttr "r_scapula_ctrl.Auto_Scapula" 10;
setAttr "R_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0" 0;
setAttr "R_scapula_ctrl_g_parentConstraint1.r_ScapulaAim1_jnt1W1" 1;
setDrivenKeyframe -currentDriver r_scapula_ctrl.Auto_Scapula R_scapula_ctrl_g_parentConstraint1.ChestFK_ctrlW0;
setDrivenKeyframe -currentDriver r_scapula_ctrl.Auto_Scapula R_scapula_ctrl_g_parentConstraint1.r_ScapulaAim1_jnt1W1;
CBunlockAttr "frzRtFrt_knee_grp.tx";
CBunlockAttr "frzRtFrt_knee_grp.ty";
CBunlockAttr "frzRtFrt_knee_grp.tz";
CBunlockAttr "frzRtFrt_knee_grp.rx";
CBunlockAttr "frzRtFrt_knee_grp.ry";
CBunlockAttr "frzRtFrt_knee_grp.rz";
CBunlockAttr "frzRtFrt_knee_grp.sx";
CBunlockAttr "frzRtFrt_knee_grp.sy";
CBunlockAttr "frzRtFrt_knee_grp.sz";
CBunlockAttr "frzRtFrt_knee_grp.v";
select -r frzRtFrt_knee_grp_parentConstraint1 ;
doDelete;
parent frzRtFrt_knee_grp r_ScapulaAim1_jnt1 ;
setAttr "ChestFK_ctrl.overrideEnabled" 1;
setAttr "r_ScapulaAim1_ikH.visibility" 0;
setAttr -lock true "r_ScapulaAim1_ikH.v";
setAttr "rtFrt_knee_ctrl.overrideEnabled" 1;
setAttr "r_ScapulaAim1_jnt2.drawStyle" 2;
setAttr "r_ScapulaAim1_jnt1.drawStyle" 2;

CBunlockAttr "frzNeck_grp.tx";
CBunlockAttr "frzNeck_grp.ty";
CBunlockAttr "frzNeck_grp.tz";
CBunlockAttr "frzNeck_grp.rx";
CBunlockAttr "frzNeck_grp.ry";
CBunlockAttr "frzNeck_grp.rz";
CBunlockAttr "frzNeck_grp.sx";
CBunlockAttr "frzNeck_grp.sy";
CBunlockAttr "frzNeck_grp.sz";
CBunlockAttr "frzNeck_grp.v";
select -r frzNeck_grp_parentConstraint1 ;
doDelete;
select -r ChestFK_ctrl ;
select -add frzNeck_grp ;
parentConstraint -mo -weight 1;
setAttr "SpinePull1_jnt.visibility" 0;setAttr -lock true "SpinePull1_jnt.v";
setAttr "SpinePull2_jnt.visibility" 0;setAttr -lock true "SpinePull2_jnt.v";
setAttr "spinePull2_ikH.visibility" 0;
setAttr -lock true "spinePull2_ikH.v";
setAttr "root_ctrl.drawStyle" 2;
setAttr "spine1_ctrl.drawStyle" 2;
setAttr "chest_ctrl.drawStyle" 2;
setAttr "spine2_ctrl.drawStyle" 2;
}

global proc linkJointSetup()
{
	string $trans[] = `ls -sl`;
	for($each in $trans)
	{
			string $buffer[];
			$numTokens = `tokenize $each "XZ" $buffer`;
			$connectbtwn = $buffer[0] ;
			print ($connectbtwn + "\n"); ;
			select $connectbtwn;
			select -add $each;
		    pointConstraint -mo -weight 1;
		    orientConstraint -mo -weight 1;
		    connectAttr -f ($connectbtwn + ".scale") ($each + ".scale");
	}
}

global proc addToonSetup()
{

//toon setup for 2 legged character

string $name[]={"lt_UpperArm","lt_LowerArm","rt_UpperArm","rt_LowerArm","lt_UpperLeg","lt_LowerLeg","rt_UpperLeg","rt_LowerLeg"};
string $nm;
group -em -n "toonGRP" ;

for($nm in $name)

{

int $num=3,$X=0,$Y=0,$Z=1;
string $dir,$plan;
$dir="V";
//if (`radioButton -q -sl CSS_RIB_VDir`) $dir="V";
string $tmp,$ttmp[];
print ("Ready to create Ribbon with "+$num+" sections, on the "+$dir+" direction.\n");
if ($dir=="V"){
$ttmp=`nurbsPlane -p 0 0 0 -ax $X $Y $Z -w 1 -lr $num -d 3 -u 1 -v $num -ch 1`;
$plan=$ttmp[0];
print ("With : 1 , Hight : "+$num+" , Normal Direction : "+$X+" "+$Y+" "+$Z+"\n");
rebuildSurface -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kc 0 -su 1 -du 1 -sv $num -dv 3 -fr 0  -dir 0 $plan;
DeleteHistory;
createHair 1 $num 10 0 0 0 0 5 0 2 1 1;
select -r "hairSystem*";
select -d "*Follicles";
delete;
}else{
float $tmp=100/$num;
$ttmp=`nurbsPlane -p 0 0 0 -ax $X $Y $Z -w $num -lr ($tmp/100) -d 3 -u $num -v 1 -ch 1`;
print ("With : "+$num+" , Hight : 1 , Normal Direction : "+$X+" "+$Y+" "+$Z+"\n");
$plan=$ttmp[0];
rebuildSurface -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kc 0 -su $num -du 3 -sv 1 -dv 1 -fr 0  -dir 1 $plan;
DeleteHistory;
createHair $num 1 10 0 0 0 0 5 0 2 1 1;
select -r "hairSystem*";
select -d "*Follicles";
delete;
}
objectMoveCommand;
select "nurbs*Follicle*";
string $folcs[];
$folcs=`ls -sl`;
select -cl;
for ($i=0;$i<$num;$i++){
joint -a -p 0 0 0 -n ($nm+"_"+($i+1)+"_JNT");
select -cl;
setAttr ($folcs[$i]+".overrideEnabled") 1;
setAttr ($folcs[$i]+".overrideDisplayType") 1;
rename $folcs[$i] ($nm+"_"+($i+1)+"_FLC");
parent ($nm+"_"+($i+1)+"_JNT") ($nm+"_"+($i+1)+"_FLC");
setAttr ($nm+"_"+($i+1)+"_JNT.translateZ") 0;
setAttr ($nm+"_"+($i+1)+"_JNT.translateX") 0;
setAttr ($nm+"_"+($i+1)+"_JNT.translateY") 0;
}
select -cl;
for ($i=0;$i<5;$i++){
joint -p 0 0 0 -rad 2 -n ($nm+"_SK_"+($i+1)+"_HND");
select -cl;
}
if (($dir=="U"&&$X)||($dir=="V"&&$Y)){
setAttr ($nm+"_SK_1_HND.tz") ($num/2+.5);
setAttr ($nm+"_SK_2_HND.tz") ($num/2);
setAttr ($nm+"_SK_4_HND.tz") ($num/2*-1);
setAttr ($nm+"_SK_5_HND.tz") (($num/2+.5)*-1);
}
if (($dir=="U"&&$Y)||($dir=="U"&&$Z)){
setAttr ($nm+"_SK_1_HND.tx") ($num/2+.5);
setAttr ($nm+"_SK_2_HND.tx") ($num/2);
setAttr ($nm+"_SK_4_HND.tx") ($num/2*-1);
setAttr ($nm+"_SK_5_HND.tx") (($num/2+.5)*-1);
}
if (($dir=="V"&&$X)||($dir=="V"&&$Z)){
setAttr ($nm+"_SK_1_HND.ty") ($num/2+.5);
setAttr ($nm+"_SK_2_HND.ty") ($num/2);
setAttr ($nm+"_SK_4_HND.ty") ($num/2*-1);
setAttr ($nm+"_SK_5_HND.ty") (($num/2+.5)*-1);
}
parent ($nm+"_SK_2_HND") ($nm+"_SK_1_HND");
parent ($nm+"_SK_4_HND") ($nm+"_SK_5_HND");
for ($i=0;$i<10;$i++){
$ttmp=`spaceLocator`;
setAttr ($ttmp[0]+".localScaleZ") .2;
setAttr ($ttmp[0]+".localScaleX") .2;
setAttr ($ttmp[0]+".localScaleY") .2;
rename $ttmp[0] ($nm+($i+1)+"_Lc");
}
parent ($nm+"2_Lc") ($nm+"3_Lc") ($nm+"1_Lc");
parent ($nm+"5_Lc") ($nm+"6_Lc") ($nm+"4_Lc");
parent ($nm+"8_Lc") ($nm+"9_Lc") ($nm+"7_Lc");
parent ($nm+"10_Lc") ($nm+"8_Lc");
rename ($nm+"1_Lc") ($nm+"_TOP_POS_Lc");
rename ($nm+"2_Lc") ($nm+"_TOP_AIM_Lc");
rename ($nm+"3_Lc") ($nm+"_TOP_UP_Lc");
rename ($nm+"4_Lc") ($nm+"_BTM_POS_Lc");
rename ($nm+"5_Lc") ($nm+"_BTM_AIM_Lc");
rename ($nm+"6_Lc") ($nm+"_BTM_UP_Lc");
rename ($nm+"7_Lc") ($nm+"_MID_POS_Lc");
rename ($nm+"8_Lc") ($nm+"_MID_AIM_Lc");
rename ($nm+"9_Lc") ($nm+"_MID_UP_Lc");
rename ($nm+"10_Lc") ($nm+"_MID_OFF_Lc");
float $pos[];
$pos=`xform -q -ws -rp ($nm+"_SK_1_HND")`;
move $pos[0] $pos[1] $pos[2] ($nm+"_TOP_POS_Lc");
$pos=`xform -q -ws -rp ($nm+"_SK_5_HND")`;
move $pos[0] $pos[1] $pos[2] ($nm+"_BTM_POS_Lc");
select ($nm+"*_UP_Lc");
if (($dir=="V"&&$Y)||($dir=="V"&&$Z)) move -r 2 0 0 ;
if (($dir=="U"&&$X)||($dir=="U"&&$Z)) move -r 0 -2 0 ;
if (($dir=="U"&&$Y)||($dir=="V"&&$X)) move -r 0 0 2 ;
pointConstraint ($nm+"_BTM_POS_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_MID_POS_Lc");
pointConstraint ($nm+"_BTM_UP_Lc") ($nm+"_TOP_UP_Lc") ($nm+"_MID_UP_Lc");
if (($dir=="U"&&$Y)){
aimConstraint -mo -weight 1 -aimVector 1 0 0 -upVector 0 0 1 -worldUpType "object" -worldUpObject ($nm+"_BTM_UP_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_BTM_AIM_Lc");
aimConstraint -mo -weight 1 -aimVector -1 0 0 -upVector 0 0 1 -worldUpType "object" -worldUpObject ($nm+"_TOP_UP_Lc") ($nm+"_BTM_POS_Lc") ($nm+"_TOP_AIM_Lc");
aimConstraint -mo -weight 1 -aimVector 1 0 0 -upVector 0 0 1 -worldUpType "object" -worldUpObject ($nm+"_MID_UP_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_MID_AIM_Lc");
}
if (($dir=="U"&&$X)){
aimConstraint -mo -weight 1 -aimVector 0 0 1 -upVector 0 -1 0 -worldUpType "object" -worldUpObject ($nm+"_BTM_UP_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_BTM_AIM_Lc");
aimConstraint -mo -weight 1 -aimVector 0 0 -1 -upVector 0 -1 0 -worldUpType "object" -worldUpObject ($nm+"_TOP_UP_Lc") ($nm+"_BTM_POS_Lc") ($nm+"_TOP_AIM_Lc");
aimConstraint -mo -weight 1 -aimVector 0 0 1 -upVector 0 -1 0 -worldUpType "object" -worldUpObject ($nm+"_MID_UP_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_MID_AIM_Lc");
}
if (($dir=="U"&&$Z)){
aimConstraint -mo -weight 1 -aimVector 1 0 0 -upVector 0 -1 0 -worldUpType "object" -worldUpObject ($nm+"_BTM_UP_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_BTM_AIM_Lc");
aimConstraint -mo -weight 1 -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "object" -worldUpObject ($nm+"_TOP_UP_Lc") ($nm+"_BTM_POS_Lc") ($nm+"_TOP_AIM_Lc");
aimConstraint -mo -weight 1 -aimVector 1 0 0 -upVector 0 -1 0 -worldUpType "object" -worldUpObject ($nm+"_MID_UP_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_MID_AIM_Lc");
}
if (($dir=="V"&&$X)){
aimConstraint -mo -weight 1 -aimVector 0 1 0 -upVector 0 0 1 -worldUpType "object" -worldUpObject ($nm+"_BTM_UP_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_BTM_AIM_Lc");
aimConstraint -mo -weight 1 -aimVector 0 -1 0 -upVector 0 0 1 -worldUpType "object" -worldUpObject ($nm+"_TOP_UP_Lc") ($nm+"_BTM_POS_Lc") ($nm+"_TOP_AIM_Lc");
aimConstraint -mo -weight 1 -aimVector 0 1 0 -upVector 0 0 1 -worldUpType "object" -worldUpObject ($nm+"_MID_UP_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_MID_AIM_Lc");
}
if (($dir=="V"&&$Y)){
aimConstraint -mo -weight 1 -aimVector 0 0 1 -upVector 1 0 0 -worldUpType "object" -worldUpObject ($nm+"_BTM_UP_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_BTM_AIM_Lc");
aimConstraint -mo -weight 1 -aimVector 0 0 -1 -upVector 1 0 0 -worldUpType "object" -worldUpObject ($nm+"_TOP_UP_Lc") ($nm+"_BTM_POS_Lc") ($nm+"_TOP_AIM_Lc");
aimConstraint -mo -weight 1 -aimVector 0 0 1 -upVector 1 0 0 -worldUpType "object" -worldUpObject ($nm+"_MID_UP_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_MID_AIM_Lc");
}
if (($dir=="V"&&$Z)){
aimConstraint -mo -weight 1 -aimVector 0 1 0 -upVector 1 0 0 -worldUpType "object" -worldUpObject ($nm+"_BTM_UP_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_BTM_AIM_Lc");
aimConstraint -mo -weight 1 -aimVector 0 -1 0 -upVector 1 0 0 -worldUpType "object" -worldUpObject ($nm+"_TOP_UP_Lc") ($nm+"_BTM_POS_Lc") ($nm+"_TOP_AIM_Lc");
aimConstraint -mo -weight 1 -aimVector 0 1 0 -upVector 1 0 0 -worldUpType "object" -worldUpObject ($nm+"_MID_UP_Lc") ($nm+"_TOP_POS_Lc") ($nm+"_MID_AIM_Lc");
}
parent ($nm+"_SK_1_HND") ($nm+"_TOP_AIM_Lc");
parent ($nm+"_SK_3_HND") ($nm+"_MID_OFF_Lc");
parent ($nm+"_SK_5_HND") ($nm+"_BTM_AIM_Lc");
select -r ($nm+"_SK_1_HND") ;
select -tgl ($nm+"_SK_3_HND") ;
select -tgl ($nm+"_SK_5_HND") ;
select -tgl $plan ;
skinCluster -tsb -sm 0 -mi 3 -dr 10;
$tmp=`createNode implicitBox`;
setAttr ($tmp+".sizeX") 1;
setAttr ($tmp+".sizeY") 1;
setAttr ($tmp+".sizeZ") 1;
rename "box1" ($nm+"_S_HLP");
$tmp=`createNode implicitBox`;
setAttr ($tmp+".sizeX") 1;
setAttr ($tmp+".sizeY") 1;
setAttr ($tmp+".sizeZ") 1;
rename "box1" ($nm+"_M_HLP");
$tmp=`createNode implicitBox`;
setAttr ($tmp+".sizeX") 1;
setAttr ($tmp+".sizeY") 1;
setAttr ($tmp+".sizeZ") 1;
rename "box1" ($nm+"_E_HLP");
$pos = `xform -q -ws -rp ($nm+"_TOP_POS_Lc")`;
move $pos[0] $pos[1] $pos[2] ($nm+"_S_HLP");
$pos = `xform -q -ws -rp ($nm+"_MID_POS_Lc")`;
move $pos[0] $pos[1] $pos[2] ($nm+"_M_HLP");
$pos = `xform -q -ws -rp ($nm+"_BTM_POS_Lc")`;
move $pos[0] $pos[1] $pos[2] ($nm+"_E_HLP");
makeIdentity -a 1 -t 1 ($nm+"_*_HLP");
parent ($nm+"_TOP_POS_Lc") ($nm+"_S_HLP");
parent ($nm+"_BTM_POS_Lc") ($nm+"_E_HLP");
group -em -n ($nm+"_M_GRP");
parent ($nm+"_M_HLP") ($nm+"_M_GRP");
parentConstraint ($nm+"_MID_AIM_Lc") ($nm+"_M_GRP");
parentConstraint ($nm+"_M_HLP") ($nm+"_MID_OFF_Lc");
select -r ($nm+"*_Lc");
$ttmp=`ls -sl`;
for ($obj in $ttmp) setAttr ($obj+".visibility") 0;
rename $plan ($nm+"_GEO");
rename ("hairSystem*Follicles") ($nm+"_FLC_GRP");
select -r ($nm+"*_HLP");
select -d ($nm+"_M_HLP");
group -n ($nm+"_Move_GRP");
group -n ($nm+"_GRP");
select -cl;
group -em -n ($nm+"_EX_GRP");
parent ($nm+"_M_GRP") ($nm+"_EX_GRP");
parent ($nm+"_EX_GRP") ($nm+"_GRP");
parent ($nm+"_FLC_GRP") ($nm+"_EX_GRP");
parent ($nm+"_GEO") ($nm+"_EX_GRP");
parent ($nm+"_MID_POS_Lc") ($nm+"_EX_GRP");
setAttr -lock true -keyable false -channelBox false ($nm+"_GRP.tx");
setAttr -lock true -keyable false -channelBox false ($nm+"_GRP.ty");
setAttr -lock true -keyable false -channelBox false ($nm+"_GRP.tz");
setAttr -lock true -keyable false -channelBox false ($nm+"_GRP.rx");
setAttr -lock true -keyable false -channelBox false ($nm+"_GRP.ry");
setAttr -lock true -keyable false -channelBox false ($nm+"_GRP.rz");
setAttr -lock true -keyable false -channelBox false ($nm+"_GRP.sx");
setAttr -lock true -keyable false -channelBox false ($nm+"_GRP.sy");
setAttr -lock true -keyable false -channelBox false ($nm+"_GRP.sz");
setAttr -lock true -keyable false -channelBox false ($nm+"_EX_GRP.tx");
setAttr -lock true -keyable false -channelBox false ($nm+"_EX_GRP.ty");
setAttr -lock true -keyable false -channelBox false ($nm+"_EX_GRP.tz");
setAttr -lock true -keyable false -channelBox false ($nm+"_EX_GRP.rx");
setAttr -lock true -keyable false -channelBox false ($nm+"_EX_GRP.ry");
setAttr -lock true -keyable false -channelBox false ($nm+"_EX_GRP.rz");
setAttr -lock true -keyable false -channelBox false ($nm+"_EX_GRP.sx");
setAttr -lock true -keyable false -channelBox false ($nm+"_EX_GRP.sy");
setAttr -lock true -keyable false -channelBox false ($nm+"_EX_GRP.sz");
setAttr -lock true -keyable false -channelBox false ($nm+"_Move_GRP.sx");
setAttr -lock true -keyable false -channelBox false ($nm+"_Move_GRP.sy");
setAttr -lock true -keyable false -channelBox false ($nm+"_Move_GRP.sz");
setAttr -keyable false -channelBox false ($nm+"_M_GRP.tx");
setAttr -keyable false -channelBox false ($nm+"_M_GRP.ty");
setAttr -keyable false -channelBox false ($nm+"_M_GRP.tz");
setAttr -keyable false -channelBox false ($nm+"_M_GRP.rx");
setAttr -keyable false -channelBox false ($nm+"_M_GRP.ry");
setAttr -keyable false -channelBox false ($nm+"_M_GRP.rz");
setAttr -keyable false -channelBox false ($nm+"_M_GRP.sx");
setAttr -keyable false -channelBox false ($nm+"_M_GRP.sy");
setAttr -keyable false -channelBox false ($nm+"_M_GRP.sz");
setAttr ($nm+"_GEO.overrideEnabled") 1;
setAttr ($nm+"_GEO.overrideDisplayType") 1;
setAttr ($nm+"_S_HLP.overrideEnabled") 1;
setAttr ($nm+"_S_HLP.overrideColor") 17;
setAttr ($nm+"_M_HLP.overrideEnabled") 1;
setAttr ($nm+"_M_HLP.overrideColor") 17;
setAttr ($nm+"_E_HLP.overrideEnabled") 1;
setAttr ($nm+"_E_HLP.overrideColor") 17;
select -cl;
print ("You may need to tweak weights for the "+$nm+"_GEO.\n");
parent ($nm+"_GRP") toonGRP;


}

//connect toony to the rig

parent toonGRP non_scale_grp;

select -r lt_shoulder_jnt ;
select -tgl lt_UpperArm_S_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
select -r lt_elbow_jnt ;
select -tgl lt_UpperArm_E_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete  lt_UpperArm_S_HLP_parentConstraint1;
parent lt_UpperArm_S_HLP lt_shoulder_jnt;
delete lt_UpperArm_S_HLPShape;
delete  lt_UpperArm_E_HLP_parentConstraint1;
parent lt_UpperArm_E_HLP lt_elbow_jnt;
delete lt_UpperArm_E_HLPShape;
delete lt_UpperArm_Move_GRP ;



select -r lt_elbow_jnt ;
select -tgl lt_LowerArm_S_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete lt_LowerArm_S_HLP_parentConstraint1;
select -r lt_wrist_jnt ;
select -tgl lt_LowerArm_E_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete lt_LowerArm_E_HLP_parentConstraint1;
parent lt_LowerArm_S_HLP lt_elbow_jnt;
delete lt_LowerArm_S_HLPShape;
parent lt_LowerArm_E_HLP lt_elbow_jnt_seg_2_joint;
delete lt_LowerArm_E_HLPShape;


select -r rt_shoulder_jnt ;
select -tgl rt_UpperArm_S_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
select -r rt_elbow_jnt ;
select -tgl rt_UpperArm_E_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete  rt_UpperArm_S_HLP_parentConstraint1;
parent rt_UpperArm_S_HLP rt_shoulder_jnt;
delete rt_UpperArm_S_HLPShape;
delete  rt_UpperArm_E_HLP_parentConstraint1;
parent rt_UpperArm_E_HLP rt_elbow_jnt;
delete rt_UpperArm_E_HLPShape;
delete rt_UpperArm_Move_GRP ;



select -r rt_elbow_jnt ;
select -tgl rt_LowerArm_S_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete rt_LowerArm_S_HLP_parentConstraint1;
select -r rt_wrist_jnt ;
select -tgl rt_LowerArm_E_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete rt_LowerArm_E_HLP_parentConstraint1;
parent rt_LowerArm_S_HLP rt_elbow_jnt;
delete rt_LowerArm_S_HLPShape;
parent rt_LowerArm_E_HLP rt_elbow_jnt_seg_2_joint;
delete rt_LowerArm_E_HLPShape;


select -r lt_hip_jnt ;
select -add lt_UpperLeg_S_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete lt_UpperLeg_S_HLP_parentConstraint1;
select -r lt_knee_jnt ;
select -tgl lt_UpperLeg_E_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete lt_UpperLeg_E_HLP_parentConstraint1;
parent lt_UpperLeg_S_HLP lt_hip_jnt;
delete lt_UpperLeg_S_HLPShape;
parent lt_UpperLeg_E_HLP lt_knee_jnt;
delete lt_UpperLeg_E_HLPShape;


select -r lt_knee_jnt ;
select -tgl lt_LowerLeg_S_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete lt_LowerLeg_S_HLP_parentConstraint1;
select -r lt_ankle_jnt ;
select -tgl lt_LowerLeg_E_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete lt_LowerLeg_E_HLP_parentConstraint1;
parent lt_LowerLeg_S_HLP lt_knee_jnt;
delete lt_LowerLeg_S_HLPShape;
parent lt_LowerLeg_E_HLP lt_knee_jnt_seg_2_joint;
delete lt_LowerLeg_E_HLPShape;

select -r rt_hip_jnt ;
select -add rt_UpperLeg_S_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete rt_UpperLeg_S_HLP_parentConstraint1;
select -r rt_knee_jnt ;
select -tgl rt_UpperLeg_E_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete rt_UpperLeg_E_HLP_parentConstraint1;
parent rt_UpperLeg_S_HLP rt_hip_jnt;
delete rt_UpperLeg_S_HLPShape;
parent rt_UpperLeg_E_HLP rt_knee_jnt;
delete rt_UpperLeg_E_HLPShape;


select -r rt_knee_jnt ;
select -tgl rt_LowerLeg_S_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete rt_LowerLeg_S_HLP_parentConstraint1;
select -r rt_ankle_jnt ;
select -tgl rt_LowerLeg_E_HLP ;
doCreateParentConstraintArgList 1 { "0","0","0","0","1","1","1","1","","1" };
parentConstraint -skipRotate x -skipRotate y -skipRotate z -weight 1;
delete rt_LowerLeg_E_HLP_parentConstraint1;
parent rt_LowerLeg_S_HLP rt_knee_jnt;
delete rt_LowerLeg_S_HLPShape;
parent rt_LowerLeg_E_HLP rt_knee_jnt_seg_2_joint;
delete rt_LowerLeg_E_HLPShape;


shadingNode -asUtility reverse -n lt_armSwitches_ctrl_IK_FK_Rev ;
connectAttr -f lt_armSwitches_ctrl.FK_IK lt_armSwitches_ctrl_IK_FK_Rev.inputX;

select -r lt_fk_lt_elbow_jnt_ctrl ;
select -add lt_elbow_jnt ;
doCreatePointConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
pointConstraint -mo -weight 1;
connectAttr -f lt_armSwitches_ctrl_IK_FK_Rev.outputX lt_elbow_jnt_pointConstraint1.lt_fk_lt_elbow_jnt_ctrlW0;
setAttr -k on lt_fk_lt_elbow_jnt_ctrl.translateX;
setAttr -k on lt_fk_lt_elbow_jnt_ctrl.translateY;
setAttr -k on lt_fk_lt_elbow_jnt_ctrl.translateZ;
CBunlockAttr "lt_fk_lt_elbow_jnt_ctrl.tx";
CBunlockAttr "lt_fk_lt_elbow_jnt_ctrl.ty";
CBunlockAttr "lt_fk_lt_elbow_jnt_ctrl.tz";

select -r lt_fk_lt_wrist_jnt_ctrl ;
select -add lt_wrist_jnt ;
doCreatePointConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
pointConstraint -mo -weight 1;
connectAttr -f lt_armSwitches_ctrl_IK_FK_Rev.outputX lt_wrist_jnt_pointConstraint1.lt_fk_lt_wrist_jnt_ctrlW0;
setAttr -k on lt_fk_lt_wrist_jnt_ctrl.translateX;
setAttr -k on lt_fk_lt_wrist_jnt_ctrl.translateY;
setAttr -k on lt_fk_lt_wrist_jnt_ctrl.translateZ;
CBunlockAttr "lt_fk_lt_wrist_jnt_ctrl.tx";
CBunlockAttr "lt_fk_lt_wrist_jnt_ctrl.ty";
CBunlockAttr "lt_fk_lt_wrist_jnt_ctrl.tz";
select -r lt_fk_lt_wrist_jnt_ctrl ;
select -add lt_elbow_jnt_seg_2_joint ;
doCreatePointConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
pointConstraint -mo -weight 1;

connectAttr -f lt_armSwitches_ctrl_IK_FK_rev.outputX lt_wrist_jnt_pointConstraint1.lt_fk_lt_wrist_jnt_ctrlW0;
connectAttr -f lt_armSwitches_ctrl_IK_FK_rev.outputX lt_elbow_jnt_seg_2_joint_pointConstraint1.lt_fk_lt_wrist_jnt_ctrlW0;


shadingNode -asUtility reverse -n rt_armSwitches_ctrl_IK_FK_Rev ;
connectAttr -f rt_armSwitches_ctrl.FK_IK rt_armSwitches_ctrl_IK_FK_Rev.inputX;

select -r rt_fk_rt_elbow_jnt_ctrl ;
select -add rt_elbow_jnt ;
doCreatePointConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
pointConstraint -mo -weight 1;
connectAttr -f rt_armSwitches_ctrl_IK_FK_Rev.outputX rt_elbow_jnt_pointConstraint1.rt_fk_rt_elbow_jnt_ctrlW0;
setAttr -k on rt_fk_rt_elbow_jnt_ctrl.translateX;
setAttr -k on rt_fk_rt_elbow_jnt_ctrl.translateY;
setAttr -k on rt_fk_rt_elbow_jnt_ctrl.translateZ;
CBunlockAttr "rt_fk_rt_elbow_jnt_ctrl.tx";
CBunlockAttr "rt_fk_rt_elbow_jnt_ctrl.ty";
CBunlockAttr "rt_fk_rt_elbow_jnt_ctrl.tz";

select -r rt_fk_rt_wrist_jnt_ctrl ;
select -add rt_wrist_jnt ;
doCreatePointConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
pointConstraint -mo -weight 1;
connectAttr -f rt_armSwitches_ctrl_IK_FK_Rev.outputX rt_wrist_jnt_pointConstraint1.rt_fk_rt_wrist_jnt_ctrlW0;
setAttr -k on rt_fk_rt_wrist_jnt_ctrl.translateX;
setAttr -k on rt_fk_rt_wrist_jnt_ctrl.translateY;
setAttr -k on rt_fk_rt_wrist_jnt_ctrl.translateZ;
CBunlockAttr "rt_fk_rt_wrist_jnt_ctrl.tx";
CBunlockAttr "rt_fk_rt_wrist_jnt_ctrl.ty";
CBunlockAttr "rt_fk_rt_wrist_jnt_ctrl.tz";
select -r rt_fk_rt_wrist_jnt_ctrl ;
select -add rt_elbow_jnt_seg_2_joint ;
doCreatePointConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
pointConstraint -mo -weight 1;

connectAttr -f rt_armSwitches_ctrl_IK_FK_rev.outputX rt_wrist_jnt_pointConstraint1.rt_fk_rt_wrist_jnt_ctrlW0;
connectAttr -f rt_armSwitches_ctrl_IK_FK_rev.outputX rt_elbow_jnt_seg_2_joint_pointConstraint1.rt_fk_rt_wrist_jnt_ctrlW0;



select -r lt_shoulder_jnt_parentConstraint1 lt_shoulder_jnt_seg_1_joint lt_UpperArm_S_HLP ;
parent -w;
duplicate lt_shoulder_jnt;
parent lt_shoulder_jnt_parentConstraint1 lt_shoulder_jnt1 ;
parent lt_shoulder_jnt_seg_1_joint lt_shoulder_jnt1 ;
parent lt_UpperArm_S_HLP lt_shoulder_jnt1 ;
connectAttr -f lt_shoulder_jnt_scale_cb.outputR lt_shoulder_jnt1.scaleX;
connectAttr -f lt_shoulder_jnt_scalePower.output lt_shoulder_jnt1.scalePower;
connectAttr -f lt_shoulder_jnt_frameCache.varying lt_shoulder_jnt1.pow;
connectAttr -f lt_lt_shoulder_jnt_volume_bta.output lt_shoulder_jnt1.scaleZ;
connectAttr -f lt_lt_shoulder_jnt_volume_bta.output lt_shoulder_jnt1.scaleY;

select -r lt_fk_lt_shoulder_jnt_ctrl ;
select -add lt_shoulder_jnt1 ;
doCreatePointConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
pointConstraint -offset 0 0 0 -weight 1;
connectAttr -f lt_armSwitches_ctrl_IK_FK_Rev.outputX lt_shoulder_jnt1_pointConstraint1.lt_fk_lt_shoulder_jnt_ctrlW0;

select -r lt_shoulder_jnt ;
select -add lt_UpperArm_S_HLP ;
doCreateParentConstraintArgList 1 { "1","0","0","0","0","1","1","1","1","","1" };
parentConstraint -mo -skipRotate x -skipRotate y -skipRotate z -weight 1;


connectAttr -f lt_shoulder_jnt_parentConstraint1.constraintRotateY lt_shoulder_jnt1.rotateY;
connectAttr -f lt_shoulder_jnt_parentConstraint1.constraintRotateZ lt_shoulder_jnt1.rotateZ;
connectAttr -f unitConversion8.output lt_shoulder_jnt1.rotateX;
connectAttr -f lt_shoulder_jnt1.inverseScale frzLt_lt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetInverseScale;
connectAttr -f lt_shoulder_jnt1.inverseScale lt_UpperArm_S_HLP_parentConstraint1.target[0].targetInverseScale;
connectAttr -f lt_shoulder_jnt1.scalePower lt_shoulder_jnt_frameCache.stream;
connectAttr -f lt_shoulder_jnt1.scalePower lt_shoulder_jnt_seg_2_joint_frameCache.stream;
connectAttr -f lt_shoulder_jnt1.scalePower lt_shoulder_jnt_seg_1_joint_frameCache.stream;
connectAttr -f lt_shoulder_jnt1.rotatePivotTranslate frzLt_lt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetRotateTranslate;
connectAttr -f lt_shoulder_jnt1.rotatePivotTranslate lt_UpperArm_S_HLP_parentConstraint1.target[0].targetRotateTranslate;
connectAttr -f lt_shoulder_jnt1.rotatePivotTranslate lt_shoulder_jnt_parentConstraint1.constraintRotateTranslate;
connectAttr -f lt_shoulder_jnt1.rotatePivot frzLt_lt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetRotatePivot;
connectAttr -f lt_shoulder_jnt1.rotatePivot lt_UpperArm_S_HLP_parentConstraint1.target[0].targetRotatePivot;
connectAttr -f lt_shoulder_jnt1.rotatePivot lt_shoulder_jnt_parentConstraint1.constraintRotatePivot;
connectAttr -f lt_shoulder_jnt1.pow lt_lt_shoulder_jnt_revPowOutput_md.input2X;
connectAttr -f lt_shoulder_jnt1.parentInverseMatrix[0] lt_shoulder_jnt_parentConstraint1.constraintParentInverseMatrix;
connectAttr -f lt_shoulder_jnt1.parentMatrix[0] frzLt_lt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetParentMatrix;
connectAttr -f lt_shoulder_jnt1.parentMatrix[0] lt_UpperArm_S_HLP_parentConstraint1.target[0].targetParentMatrix;
connectAttr -f lt_shoulder_jnt1.jointOrient frzLt_lt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetJointOrient;
connectAttr -f lt_shoulder_jnt1.jointOrient lt_UpperArm_S_HLP_parentConstraint1.target[0].targetJointOrient;
connectAttr -f lt_shoulder_jnt1.jointOrient lt_shoulder_jnt_parentConstraint1.constraintJointOrient;
connectAttr -f lt_shoulder_jnt1.scale frzLt_lt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetScale;
connectAttr -f lt_shoulder_jnt1.scale lt_UpperArm_S_HLP_parentConstraint1.target[0].targetScale;
connectAttr -f lt_shoulder_jnt1.scaleX lt_lt_shoulder_jnt_revPowInput_md.input1X;
connectAttr -f lt_shoulder_jnt1.rotate frzLt_lt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetRotate;
connectAttr -f lt_shoulder_jnt1.rotate lt_UpperArm_S_HLP_parentConstraint1.target[0].targetRotate;
connectAttr -f lt_shoulder_jnt1.translate frzLt_lt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetTranslate;
connectAttr -f lt_shoulder_jnt1.translate lt_UpperArm_S_HLP_parentConstraint1.target[0].targetTranslate;
connectAttr -f lt_shoulder_jnt1.instObjGroups[0] SkinJoints_set.dagSetMembers[15];
connectAttr -f lt_shoulder_jnt1.rotateOrder frzLt_lt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetRotateOrder;
connectAttr -f lt_shoulder_jnt1.rotateOrder lt_UpperArm_S_HLP_parentConstraint1.target[0].targetRotateOrder;
connectAttr -f lt_shoulder_jnt1.rotateOrder lt_shoulder_jnt_parentConstraint1.constraintRotateOrder;
connectAttr -f lt_shoulder_jnt1.segmentScaleCompensate lt_UpperArm_S_HLP_parentConstraint1.target[0].targetScaleCompensate;
connectAttr -f lt_shoulder_jnt1.segmentScaleCompensate frzLt_lt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetScaleCompensate;

print ("successfully completed : left hand part done.\n");


select -r rt_shoulder_jnt_parentConstraint1 rt_shoulder_jnt_seg_1_joint rt_UpperArm_S_HLP ;
parent -w;
duplicate rt_shoulder_jnt;
parent rt_shoulder_jnt_parentConstraint1 rt_shoulder_jnt1 ;
parent rt_shoulder_jnt_seg_1_joint rt_shoulder_jnt1 ;
parent rt_UpperArm_S_HLP rt_shoulder_jnt1 ;
connectAttr -f rt_shoulder_jnt_scale_cb.outputR rt_shoulder_jnt1.scaleX;
connectAttr -f rt_shoulder_jnt_scalePower.output rt_shoulder_jnt1.scalePower;
connectAttr -f rt_shoulder_jnt_frameCache.varying rt_shoulder_jnt1.pow;
connectAttr -f rt_rt_shoulder_jnt_volume_bta.output rt_shoulder_jnt1.scaleZ;
connectAttr -f rt_rt_shoulder_jnt_volume_bta.output rt_shoulder_jnt1.scaleY;

select -r rt_fk_rt_shoulder_jnt_ctrl ;
select -add rt_shoulder_jnt1 ;
doCreatePointConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
pointConstraint -offset 0 0 0 -weight 1;
connectAttr -f rt_armSwitches_ctrl_IK_FK_Rev.outputX rt_shoulder_jnt1_pointConstraint1.rt_fk_rt_shoulder_jnt_ctrlW0;

select -r rt_shoulder_jnt ;
select -add rt_UpperArm_S_HLP ;
doCreateParentConstraintArgList 1 { "1","0","0","0","0","1","1","1","1","","1" };
parentConstraint -mo -skipRotate x -skipRotate y -skipRotate z -weight 1;

connectAttr -f rt_shoulder_jnt_parentConstraint1.constraintRotateY rt_shoulder_jnt1.rotateY;
connectAttr -f rt_shoulder_jnt_parentConstraint1.constraintRotateZ rt_shoulder_jnt1.rotateZ;
connectAttr -f unitConversion47.output rt_shoulder_jnt1.rotateX;
connectAttr -f rt_shoulder_jnt1.inverseScale frzRt_rt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetInverseScale;
connectAttr -f rt_shoulder_jnt1.inverseScale rt_UpperArm_S_HLP_parentConstraint1.target[0].targetInverseScale;
connectAttr -f rt_shoulder_jnt1.scalePower rt_shoulder_jnt_frameCache.stream;
connectAttr -f rt_shoulder_jnt1.scalePower rt_shoulder_jnt_seg_2_joint_frameCache.stream;
connectAttr -f rt_shoulder_jnt1.scalePower rt_shoulder_jnt_seg_1_joint_frameCache.stream;
connectAttr -f rt_shoulder_jnt1.rotatePivotTranslate frzRt_rt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetRotateTranslate;
connectAttr -f rt_shoulder_jnt1.rotatePivotTranslate rt_UpperArm_S_HLP_parentConstraint1.target[0].targetRotateTranslate;
connectAttr -f rt_shoulder_jnt1.rotatePivotTranslate rt_shoulder_jnt_parentConstraint1.constraintRotateTranslate;
connectAttr -f rt_shoulder_jnt1.rotatePivot frzRt_rt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetRotatePivot;
connectAttr -f rt_shoulder_jnt1.rotatePivot rt_UpperArm_S_HLP_parentConstraint1.target[0].targetRotatePivot;
connectAttr -f rt_shoulder_jnt1.rotatePivot rt_shoulder_jnt_parentConstraint1.constraintRotatePivot;
connectAttr -f rt_shoulder_jnt1.pow rt_rt_shoulder_jnt_revPowOutput_md.input2X;
connectAttr -f rt_shoulder_jnt1.parentInverseMatrix[0] rt_shoulder_jnt_parentConstraint1.constraintParentInverseMatrix;
connectAttr -f rt_shoulder_jnt1.parentMatrix[0] frzRt_rt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetParentMatrix;
connectAttr -f rt_shoulder_jnt1.parentMatrix[0] rt_UpperArm_S_HLP_parentConstraint1.target[0].targetParentMatrix;
connectAttr -f rt_shoulder_jnt1.jointOrient frzRt_rt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetJointOrient;
connectAttr -f rt_shoulder_jnt1.jointOrient rt_UpperArm_S_HLP_parentConstraint1.target[0].targetJointOrient;
connectAttr -f rt_shoulder_jnt1.jointOrient rt_shoulder_jnt_parentConstraint1.constraintJointOrient;
connectAttr -f rt_shoulder_jnt1.scale frzRt_rt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetScale;
connectAttr -f rt_shoulder_jnt1.scale rt_UpperArm_S_HLP_parentConstraint1.target[0].targetScale;
connectAttr -f rt_shoulder_jnt1.scaleX rt_rt_shoulder_jnt_revPowInput_md.input1X;
connectAttr -f rt_shoulder_jnt1.rotate frzRt_rt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetRotate;
connectAttr -f rt_shoulder_jnt1.rotate rt_UpperArm_S_HLP_parentConstraint1.target[0].targetRotate;
connectAttr -f rt_shoulder_jnt1.translate frzRt_rt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetTranslate;
connectAttr -f rt_shoulder_jnt1.translate rt_UpperArm_S_HLP_parentConstraint1.target[0].targetTranslate;
connectAttr -f rt_shoulder_jnt1.instObjGroups[0] SkinJoints_set.dagSetMembers[15];
connectAttr -f rt_shoulder_jnt1.rotateOrder frzRt_rt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetRotateOrder;
connectAttr -f rt_shoulder_jnt1.rotateOrder rt_UpperArm_S_HLP_parentConstraint1.target[0].targetRotateOrder;
connectAttr -f rt_shoulder_jnt1.rotateOrder rt_shoulder_jnt_parentConstraint1.constraintRotateOrder;
connectAttr -f rt_shoulder_jnt1.segmentScaleCompensate rt_UpperArm_S_HLP_parentConstraint1.target[0].targetScaleCompensate;
connectAttr -f rt_shoulder_jnt1.segmentScaleCompensate frzRt_rt_shoulder_jnt_twist_grp_parentConstraint1.target[0].targetScaleCompensate;


print ("successfully completed : right hand part done.\n");

select -r lt_UpperArm_E_HLP ;
source "wireShape.mel"; wireShape("sphere");
select -r sphere1.cv[0:16] ;
scale -r 0.3 0.3 0.3 ;
rename sphere1 lt_Arm_Mid_CTRL;
parent lt_Arm_Mid_CTRL lt_elbow_jnt ;
//delete lt_UpperArm_E_HLP_parentConstraint2 lt_LowerArm_S_HLP_parentConstraint2;
select -r lt_Arm_Mid_CTRL ;
source "zeroOut.mel"; zeroOut("");
rename Lt_Arm_Mid_CTRL_offset lt_Elbow_Toony_grp;
select -r lt_UpperArm_E_HLP lt_LowerArm_S_HLP ;
source "zeroOut.mel"; zeroOut("");
rename "lt_LowerArm_S_HLP" "lt_LowerArm_S_Toony";
rename "lt_UpperArm_E_HLP" "lt_UpperArm_E_Toony";
rename "Lt_LowerArm_S_HLP_offset" "Lt_LowerArm_S_HLP_GRP";
rename "Lt_UpperArm_E_HLP_offset" "Lt_UpperArm_E_HLP_GRP";
parent Lt_UpperArm_E_HLP_GRP Lt_LowerArm_S_HLP_GRP lt_Arm_Mid_CTRL ;
setAttr -lock true -keyable false -channelBox false "lt_Arm_Mid_CTRL.sx";
setAttr -lock true -keyable false -channelBox false "lt_Arm_Mid_CTRL.sy";
setAttr -lock true -keyable false -channelBox false "lt_Arm_Mid_CTRL.sz";
setAttr -lock true -keyable false -channelBox false "lt_Arm_Mid_CTRL.v";
rename lt_Arm_Mid_CTRL lt_Arm_Elbow_Toony;
select -r lt_UpperArm_M_HLP ;
source "wireShape.mel"; wireShape("sphere");
select -r sphere1.cv[0:16] ;
scale -r  0.3 0.3 0.3 ;
select -r sphere1 ;
pickWalk -d down;
select -tgl lt_UpperArm_M_HLP ;
parent -s -r;
delete sphere1;
select -r lt_LowerArm_M_HLP ;
source "wireShape.mel"; wireShape("sphere");
select -r sphere1.cv[0:16] ;
scale -r  0.3 0.3 0.3 ;
select -r sphere1 ;
pickWalk -d down;
select -tgl lt_LowerArm_M_HLP ;
parent -s -r;
delete sphere1;

print ("successfully completed : left arm part done.\n");

select -r rt_UpperArm_E_HLP ;
source "wireShape.mel"; wireShape("sphere");
select -r sphere1.cv[0:16] ;
scale -r  0.3 0.3 0.3 ;
rename sphere1 rt_Arm_Mid_CTRL;
parent rt_Arm_Mid_CTRL rt_elbow_jnt ;
//delete rt_UpperArm_E_HLP_parentConstraint2 rt_LowerArm_S_HLP_parentConstraint2;
select -r rt_Arm_Mid_CTRL ;
source "zeroOut.mel"; zeroOut("");
rename Rt_Arm_Mid_CTRL_offset rt_Elbow_Toony_grp;
select -r rt_UpperArm_E_HLP rt_LowerArm_S_HLP ;
source "zeroOut.mel"; zeroOut("");
rename "rt_LowerArm_S_HLP" "rt_LowerArm_S_Toony";
rename "rt_UpperArm_E_HLP" "rt_UpperArm_E_Toony";
rename "Rt_LowerArm_S_HLP_offset" "rt_LowerArm_S_HLP_GRP";
rename "Rt_UpperArm_E_HLP_offset" "rt_UpperArm_E_HLP_GRP";
parent rt_UpperArm_E_HLP_GRP rt_LowerArm_S_HLP_GRP rt_Arm_Mid_CTRL ;
setAttr -lock true -keyable false -channelBox false "rt_Arm_Mid_CTRL.sx";
setAttr -lock true -keyable false -channelBox false "rt_Arm_Mid_CTRL.sy";
setAttr -lock true -keyable false -channelBox false "rt_Arm_Mid_CTRL.sz";
setAttr -lock true -keyable false -channelBox false "rt_Arm_Mid_CTRL.v";
rename rt_Arm_Mid_CTRL rt_Arm_Elbow_Toony;
select -r rt_UpperArm_M_HLP ;
source "wireShape.mel"; wireShape("sphere");
select -r sphere1.cv[0:16] ;
scale -r  0.3 0.3 0.3 ;
select -r sphere1 ;
pickWalk -d down;
select -tgl rt_UpperArm_M_HLP ;
parent -s -r;
delete sphere1;
select -r rt_LowerArm_M_HLP ;
source "wireShape.mel"; wireShape("sphere");
select -r sphere1.cv[0:16] ;
scale -r  0.3 0.3 0.3 ;
select -r sphere1 ;
pickWalk -d down;
select -tgl rt_LowerArm_M_HLP ;
parent -s -r;
delete sphere1;

print ("successfully completed : right arm part done.\n");

select -r rt_UpperLeg_E_HLP ;
source "wireShape.mel"; wireShape("sphere");
select -r sphere1.cv[0:16] ;
scale -r  0.3 0.3 0.3 ;
rename sphere1 rt_Leg_Mid_CTRL;
parent rt_Leg_Mid_CTRL rt_knee_jnt ;
//delete rt_UpperLeg_E_HLP_parentConstraint2 rt_LowerLeg_S_HLP_parentConstraint2;
select -r rt_Leg_Mid_CTRL ;
source "zeroOut.mel"; zeroOut("");
rename Rt_Leg_Mid_CTRL_offset rt_Knee_Toony_grp;
select -r rt_UpperLeg_E_HLP rt_LowerLeg_S_HLP ;
source "zeroOut.mel"; zeroOut("");
rename "rt_LowerLeg_S_HLP" "rt_LowerLeg_S_Toony";
rename "rt_UpperLeg_E_HLP" "rt_UpperLeg_E_Toony";
rename "Rt_LowerLeg_S_HLP_offset" "rt_LowerLeg_S_HLP_GRP";
rename "Rt_UpperLeg_E_HLP_offset" "rt_UpperLeg_E_HLP_GRP";
parent rt_UpperLeg_E_HLP_GRP rt_LowerLeg_S_HLP_GRP rt_Leg_Mid_CTRL ;
setAttr -lock true -keyable false -channelBox false "rt_Leg_Mid_CTRL.sx";
setAttr -lock true -keyable false -channelBox false "rt_Leg_Mid_CTRL.sy";
setAttr -lock true -keyable false -channelBox false "rt_Leg_Mid_CTRL.sz";
setAttr -lock true -keyable false -channelBox false "rt_Leg_Mid_CTRL.v";
rename rt_Leg_Mid_CTRL rt_Leg_Elbow_Toony;
select -r rt_UpperLeg_M_HLP ;
source "wireShape.mel"; wireShape("sphere");
select -r sphere1.cv[0:16] ;
scale -r  0.3 0.3 0.3 ;
select -r sphere1 ;
pickWalk -d down;
select -tgl rt_UpperLeg_M_HLP ;
parent -s -r;
delete sphere1;
select -r rt_LowerLeg_M_HLP ;
source "wireShape.mel"; wireShape("sphere");
select -r sphere1.cv[0:16] ;
scale -r  0.3 0.3 0.3 ;
select -r sphere1 ;
pickWalk -d down;
select -tgl rt_LowerLeg_M_HLP ;
parent -s -r;
delete sphere1;

print ("successfully completed : right UpperLeg part done.\n");

select -r lt_UpperLeg_E_HLP ;
source "wireShape.mel"; wireShape("sphere");
select -r sphere1.cv[0:16] ;
scale -r  0.3 0.3 0.3 ;
rename sphere1 lt_Leg_Mid_CTRL;
parent lt_Leg_Mid_CTRL lt_knee_jnt ;
//delete lt_UpperLeg_E_HLP_parentConstraint2 lt_LowerLeg_S_HLP_parentConstraint2;
select -r lt_Leg_Mid_CTRL ;
source "zeroOut.mel"; zeroOut("");
rename Lt_Leg_Mid_CTRL_offset lt_Knee_Toony_grp;
select -r lt_UpperLeg_E_HLP lt_LowerLeg_S_HLP ;
source "zeroOut.mel"; zeroOut("");
rename "lt_LowerLeg_S_HLP" "lt_LowerLeg_S_Toony";
rename "lt_UpperLeg_E_HLP" "lt_UpperLeg_E_Toony";
rename "Lt_LowerLeg_S_HLP_offset" "lt_LowerLeg_S_HLP_GRP";
rename "Lt_UpperLeg_E_HLP_offset" "lt_UpperLeg_E_HLP_GRP";
parent lt_UpperLeg_E_HLP_GRP lt_LowerLeg_S_HLP_GRP lt_Leg_Mid_CTRL ;
setAttr -lock true -keyable false -channelBox false "lt_Leg_Mid_CTRL.sx";
setAttr -lock true -keyable false -channelBox false "lt_Leg_Mid_CTRL.sy";
setAttr -lock true -keyable false -channelBox false "lt_Leg_Mid_CTRL.sz";
setAttr -lock true -keyable false -channelBox false "lt_Leg_Mid_CTRL.v";
rename lt_Leg_Mid_CTRL lt_Leg_Elbow_Toony;
select -r lt_UpperLeg_M_HLP ;
source "wireShape.mel"; wireShape("sphere");
select -r sphere1.cv[0:16] ;
scale -r  0.3 0.3 0.3 ;
select -r sphere1 ;
pickWalk -d down;
select -tgl lt_UpperLeg_M_HLP ;
parent -s -r;
delete sphere1;
select -r lt_LowerLeg_M_HLP ;
source "wireShape.mel"; wireShape("sphere");
select -r sphere1.cv[0:16] ;
scale -r  0.3 0.3 0.3 ;
select -r sphere1 ;
pickWalk -d down;
select -tgl lt_LowerLeg_M_HLP ;
parent -s -r;
delete sphere1;


print ("successfully completed : left UpperLeg part done.\n");

print ("Begins : Toony Controls features.\n");

setAttr "lt_Arm_Elbow_Toony.overrideEnabled" 1;
select -r lt_LowerArm_3_FLC ;
select -tgl lt_Arm_Elbow_Toony ;
doCreateOrientConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
orientConstraint -offset 0 0 0 -weight 1;
delete lt_Arm_Elbow_Toony_orientConstraint1;
select -r lt_Arm_Elbow_Toony ;
parent -w;
select -r lt_Arm_Elbow_Toony ;
select -tgl lt_Elbow_Toony_grp;
doCreateOrientConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
orientConstraint -offset 0 0 0 -weight 1;
delete lt_Elbow_Toony_grp_orientConstraint1 ;
parent lt_Arm_Elbow_Toony lt_Elbow_Toony_grp;
select -r lt_Arm_Elbow_Toony;
source "cr_curveUtil.mel"; cr_curveUtil(); cr_updateColorSlider 15;


setAttr "rt_Arm_Elbow_Toony.overrideEnabled" 1;
select -r rt_LowerArm_3_FLC ;
select -tgl rt_Arm_Elbow_Toony ;
doCreateOrientConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
orientConstraint -offset 0 0 0 -weight 1;
delete rt_Arm_Elbow_Toony_orientConstraint1;
select -r rt_Arm_Elbow_Toony ;
parent -w;
select -r rt_Arm_Elbow_Toony ;
select -tgl rt_Elbow_Toony_grp;
doCreateOrientConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
orientConstraint -offset 0 0 0 -weight 1;
delete rt_Elbow_Toony_grp_orientConstraint1 ;
parent rt_Arm_Elbow_Toony rt_Elbow_Toony_grp;
select -r rt_Arm_Elbow_Toony;
source "cr_curveUtil.mel"; cr_curveUtil(); cr_updateColorSlider 15;



setAttr "rt_Leg_Elbow_Toony.overrideEnabled" 1;
select -r rt_LowerLeg_3_FLC ;
select -tgl rt_Leg_Elbow_Toony ;
doCreateOrientConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
orientConstraint -offset 0 0 0 -weight 1;
delete rt_Leg_Elbow_Toony_orientConstraint1;
select -r rt_Leg_Elbow_Toony ;
parent -w;
select -r rt_Leg_Elbow_Toony ;
select -tgl rt_Knee_Toony_grp;
doCreateOrientConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
orientConstraint -offset 0 0 0 -weight 1;
delete rt_Knee_Toony_grp_orientConstraint1 ;
parent rt_Leg_Elbow_Toony rt_Knee_Toony_grp;
select -r rt_Leg_Elbow_Toony;
source "cr_curveUtil.mel"; cr_curveUtil(); cr_updateColorSlider 15;


setAttr "lt_Leg_Elbow_Toony.overrideEnabled" 1;
select -r lt_LowerLeg_3_FLC ;
select -tgl lt_Leg_Elbow_Toony ;
doCreateOrientConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
orientConstraint -offset 0 0 0 -weight 1;
delete lt_Leg_Elbow_Toony_orientConstraint1;
select -r lt_Leg_Elbow_Toony ;
parent -w;
select -r lt_Leg_Elbow_Toony ;
select -tgl lt_Knee_Toony_grp;
doCreateOrientConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
orientConstraint -offset 0 0 0 -weight 1;
delete lt_Knee_Toony_grp_orientConstraint1 ;
parent lt_Leg_Elbow_Toony lt_Knee_Toony_grp;
select -r lt_Leg_Elbow_Toony;
source "cr_curveUtil.mel"; cr_curveUtil(); cr_updateColorSlider 15;

print ("Completed : Toony Controls features.\n");


//left side finger orientation with the wrist

print ("Begins : Finger part features.\n");

rename "lt_fingersParts_grp1" "lt_fingersParts_grp";
setAttr -k on |rig|worldA_ctrl|worldB_ctrl|controls_grp|lt_fingersParts_grp.rotateX;
setAttr -k on |rig|worldA_ctrl|worldB_ctrl|controls_grp|lt_fingersParts_grp.rotateY;
setAttr -k on |rig|worldA_ctrl|worldB_ctrl|controls_grp|lt_fingersParts_grp.rotateZ;
setAttr -k on |rig|worldA_ctrl|worldB_ctrl|controls_grp|lt_fingersParts_grp.translateX;
setAttr -k on |rig|worldA_ctrl|worldB_ctrl|controls_grp|lt_fingersParts_grp.translateY;
setAttr -k on |rig|worldA_ctrl|worldB_ctrl|controls_grp|lt_fingersParts_grp.translateZ;
CBunlockAttr "lt_fingersParts_grp.tx";
CBunlockAttr "lt_fingersParts_grp.ty";
CBunlockAttr "lt_fingersParts_grp.tz";
CBunlockAttr "lt_fingersParts_grp.rx";
CBunlockAttr "lt_fingersParts_grp.ry";
CBunlockAttr "lt_fingersParts_grp.rz";
select -r lt_wristEnd_jnt ;
select -add lt_fingersParts_grp ;
doCreateParentConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
parentConstraint -mo -weight 1;

print ("successfully completed : Left Finger part done.\n");

//right side finger orientation with the wrist
rename "rt_fingersParts_grp1" "rt_fingersParts_grp";
setAttr -k on |rig|worldA_ctrl|worldB_ctrl|controls_grp|rt_fingersParts_grp.rotateX;
setAttr -k on |rig|worldA_ctrl|worldB_ctrl|controls_grp|rt_fingersParts_grp.rotateY;
setAttr -k on |rig|worldA_ctrl|worldB_ctrl|controls_grp|rt_fingersParts_grp.rotateZ;
setAttr -k on |rig|worldA_ctrl|worldB_ctrl|controls_grp|rt_fingersParts_grp.translateX;
setAttr -k on |rig|worldA_ctrl|worldB_ctrl|controls_grp|rt_fingersParts_grp.translateY;
setAttr -k on |rig|worldA_ctrl|worldB_ctrl|controls_grp|rt_fingersParts_grp.translateZ;
CBunlockAttr "rt_fingersParts_grp.tx";
CBunlockAttr "rt_fingersParts_grp.ty";
CBunlockAttr "rt_fingersParts_grp.tz";
CBunlockAttr "rt_fingersParts_grp.rx";
CBunlockAttr "rt_fingersParts_grp.ry";
CBunlockAttr "rt_fingersParts_grp.rz";
select -r rt_wristEnd_jnt ;
select -add rt_fingersParts_grp ;
doCreateParentConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
parentConstraint -mo -weight 1;

print ("successfully completed : Right Finger part done.\n");
print ("successfully completed : Finger part done.\n");

//set the nurbs plane visiblity off to toony setups
setAttr "lt_UpperArm_GEO.visibility" 0;
setAttr "rt_LowerLeg_GEO.visibility" 0;
setAttr "rt_UpperLeg_GEO.visibility" 0;
setAttr "lt_LowerLeg_GEO.visibility" 0;
setAttr "lt_UpperLeg_GEO.visibility" 0;
setAttr "rt_LowerArm_GEO.visibility" 0;
setAttr "rt_UpperArm_GEO.visibility" 0;
setAttr "lt_LowerArm_GEO.visibility" 0;
setAttr -lock true "lt_UpperArm_GEO.v";
setAttr -lock true "rt_LowerLeg_GEO.v";
setAttr -lock true "rt_UpperLeg_GEO.v";
setAttr -lock true "lt_LowerLeg_GEO.v";
setAttr -lock true "lt_UpperLeg_GEO.v";
setAttr -lock true "rt_LowerArm_GEO.v";
setAttr -lock true "rt_UpperArm_GEO.v";
setAttr -lock true "lt_LowerArm_GEO.v";

//finally scale fix to the toony setups
connectAttr worldA_ctrl.scale lt_LowerLeg_2_FLC.scale;
connectAttr worldA_ctrl.scale lt_UpperArm_3_FLC.scale;
connectAttr worldA_ctrl.scale lt_LowerLeg_3_FLC.scale;
connectAttr worldA_ctrl.scale rt_LowerLeg_1_FLC.scale;
connectAttr worldA_ctrl.scale lt_UpperArm_2_FLC.scale;
connectAttr worldA_ctrl.scale lt_UpperArm_1_FLC.scale;
connectAttr worldA_ctrl.scale rt_LowerArm_2_FLC.scale;
connectAttr worldA_ctrl.scale lt_LowerArm_2_FLC.scale;
connectAttr worldA_ctrl.scale rt_UpperArm_3_FLC.scale;
connectAttr worldA_ctrl.scale rt_LowerArm_3_FLC.scale;
connectAttr worldA_ctrl.scale rt_UpperArm_1_FLC.scale;
connectAttr worldA_ctrl.scale lt_LowerArm_1_FLC.scale;
connectAttr worldA_ctrl.scale rt_LowerLeg_2_FLC.scale;
connectAttr worldA_ctrl.scale lt_LowerArm_3_FLC.scale;
connectAttr worldA_ctrl.scale rt_LowerArm_M_HLP.scale;
connectAttr worldA_ctrl.scale lt_LowerLeg_1_FLC.scale;
connectAttr worldA_ctrl.scale lt_LowerLeg_M_HLP.scale;
connectAttr worldA_ctrl.scale lt_UpperLeg_2_FLC.scale;
connectAttr worldA_ctrl.scale lt_UpperLeg_1_FLC.scale;
connectAttr worldA_ctrl.scale rt_UpperLeg_M_HLP.scale;
connectAttr worldA_ctrl.scale rt_UpperArm_2_FLC.scale;
connectAttr worldA_ctrl.scale rt_UpperLeg_1_FLC.scale;
connectAttr worldA_ctrl.scale lt_LowerArm_M_HLP.scale;
connectAttr worldA_ctrl.scale rt_LowerLeg_3_FLC.scale;
connectAttr worldA_ctrl.scale rt_UpperArm_M_HLP.scale;
connectAttr worldA_ctrl.scale lt_UpperLeg_3_FLC.scale;
connectAttr worldA_ctrl.scale lt_UpperArm_M_HLP.scale;
connectAttr worldA_ctrl.scale rt_LowerArm_1_FLC.scale;
connectAttr worldA_ctrl.scale lt_UpperLeg_M_HLP.scale;
connectAttr worldA_ctrl.scale rt_UpperLeg_2_FLC.scale;
connectAttr worldA_ctrl.scale rt_UpperLeg_3_FLC.scale;
connectAttr worldA_ctrl.scale rt_LowerLeg_M_HLP.scale;

print ("successfully completed : World Scale to toon scale done.\n");

print ("Begins : Finger D setup.\n");

//finger D setup
string $ctrls []  = {"lt_armSwitches_ctrl","rt_armSwitches_ctrl"};

for ($nam in $ctrls)
{
	addAttr -ln "Index_D_Curl"  -at double   $nam;
	setAttr -e-keyable true  ($nam + ".Index_D_Curl");
		addAttr -ln "Mid_D_Curl"  -at double   $nam;
	setAttr -e-keyable true  ($nam + ".Mid_D_Curl");
			addAttr -ln "Ring_D_Curl"  -at double   $nam;
	setAttr -e-keyable true  ($nam + ".Ring_D_Curl");
		addAttr -ln "Pinky_D_Curl"  -at double   $nam;
	setAttr -e-keyable true  ($nam + ".Pinky_D_Curl");
}
	CBunlockAttr "frzRt_index4_jnt_grp.rz";
    CBunlockAttr "frzRt_pinky4_jnt_grp.rz";
    CBunlockAttr "frzRt_ring4_jnt_grp.rz";
    CBunlockAttr "frzRt_middle4_jnt_grp.rz";
	CBunlockAttr "frzLt_pinky4_jnt_grp.rz";
    CBunlockAttr "frzLt_index4_jnt_grp.rz";
    CBunlockAttr "frzLt_middle4_jnt_grp.rz";
    CBunlockAttr "frzLt_ring4_jnt_grp.rz";


addAttr -ln "CurlOffsetS4"  -at double  -dv 1.200 lt_armSwitches_ctrl;
shadingNode -asUtility multDoubleLinear;
rename "multDoubleLinear1" "lt_fingerCurlAdjust_4_mdl";
connectAttr lt_armSwitches_ctrl.CurlOffsetS4 lt_fingerCurlAdjust_4_mdl.input2;
connectAttr lt_armSwitches_ctrl.fullCurl lt_fingerCurlAdjust_4_mdl.input1;
shadingNode -asUtility addDoubleLinear;
rename "addDoubleLinear1" "lt_pinky4_jnt_ctrl_rZ_adl";
shadingNode -asUtility addDoubleLinear;
rename "addDoubleLinear1" "lt_ring4_jnt_ctrl_rZ_adl";
shadingNode -asUtility addDoubleLinear;
rename "addDoubleLinear1" "lt_middle4_jnt_ctrl_rZ_adl";
shadingNode -asUtility addDoubleLinear;
rename "addDoubleLinear1" "lt_index4_jnt_ctrl_rZ_adl";
connectAttr lt_fingerCurlAdjust_4_mdl.output lt_pinky4_jnt_ctrl_rZ_adl.input1;
connectAttr lt_fingerCurlAdjust_4_mdl.output lt_ring4_jnt_ctrl_rZ_adl.input1;
connectAttr lt_fingerCurlAdjust_4_mdl.output lt_middle4_jnt_ctrl_rZ_adl.input1;
connectAttr lt_fingerCurlAdjust_4_mdl.output lt_index4_jnt_ctrl_rZ_adl.input1;
connectAttr lt_armSwitches_ctrl.Pinky_D_Curl lt_pinky4_jnt_ctrl_rZ_adl.input2;
connectAttr lt_armSwitches_ctrl.Ring_D_Curl lt_ring4_jnt_ctrl_rZ_adl.input2;
connectAttr lt_armSwitches_ctrl.Index_D_Curl lt_index4_jnt_ctrl_rZ_adl.input2;
connectAttr lt_armSwitches_ctrl.Mid_D_Curl lt_middle4_jnt_ctrl_rZ_adl.input2;
connectAttr lt_pinky4_jnt_ctrl_rZ_adl.output  frzLt_pinky4_jnt_grp.rotateZ;
connectAttr lt_ring4_jnt_ctrl_rZ_adl.output  frzLt_ring4_jnt_grp.rotateZ;
connectAttr lt_middle4_jnt_ctrl_rZ_adl.output  frzLt_middle4_jnt_grp.rotateZ;
connectAttr lt_index4_jnt_ctrl_rZ_adl.output  frzLt_index4_jnt_grp.rotateZ;
setAttr "lt_armSwitches_ctrl.curlOffset_s3" 1.9;

addAttr -ln "thumbCurlOffsetS1"  -at double  -dv 0 lt_armSwitches_ctrl;
addAttr -ln "thumbCurlOffsetS2"  -at double  -dv 0 lt_armSwitches_ctrl;
addAttr -ln "thumbCurlOffsetS3"  -at double  -dv 0 lt_armSwitches_ctrl;
shadingNode -asUtility multDoubleLinear;
rename "multDoubleLinear1" "lt_thumbCurlAdjust_1_mdl";
shadingNode -asUtility multDoubleLinear;
rename "multDoubleLinear1" "lt_thumbCurlAdjust_2_mdl";
shadingNode -asUtility multDoubleLinear;
rename "multDoubleLinear1" "lt_thumbCurlAdjust_3_mdl";
connectAttr -f lt_armSwitches_ctrl.fullCurl lt_thumbCurlAdjust_1_mdl.input1;
connectAttr -f lt_armSwitches_ctrl.thumbCurlOffsetS1 lt_thumbCurlAdjust_1_mdl.input2;
connectAttr -f lt_thumbCurlAdjust_1_mdl.output lt_thumb1_jnt_ctrl_rZ_adl.input1;

connectAttr -f lt_armSwitches_ctrl.fullCurl lt_thumbCurlAdjust_2_mdl.input1;
connectAttr -f lt_armSwitches_ctrl.thumbCurlOffsetS2 lt_thumbCurlAdjust_2_mdl.input2;
connectAttr -f lt_thumbCurlAdjust_2_mdl.output lt_thumb2_jnt_ctrl_rZ_adl.input1;

connectAttr -f lt_armSwitches_ctrl.fullCurl lt_thumbCurlAdjust_3_mdl.input1;
connectAttr -f lt_armSwitches_ctrl.thumbCurlOffsetS3 lt_thumbCurlAdjust_3_mdl.input2;
connectAttr -f lt_thumbCurlAdjust_3_mdl.output lt_thumb3_jnt_ctrl_rZ_adl.input1;



addAttr -ln "CurlOffsetS4"  -at double  -dv 1.200 rt_armSwitches_ctrl;
shadingNode -asUtility multDoubleLinear;
rename "multDoubleLinear1" "rt_fingerCurlAdjust_4_mdl";
connectAttr rt_armSwitches_ctrl.CurlOffsetS4 rt_fingerCurlAdjust_4_mdl.input2;
connectAttr rt_armSwitches_ctrl.fullCurl rt_fingerCurlAdjust_4_mdl.input1;
shadingNode -asUtility addDoubleLinear;
rename "addDoubleLinear1" "rt_pinky4_jnt_ctrl_rZ_adl";
shadingNode -asUtility addDoubleLinear;
rename "addDoubleLinear1" "rt_ring4_jnt_ctrl_rZ_adl";
shadingNode -asUtility addDoubleLinear;
rename "addDoubleLinear1" "rt_middle4_jnt_ctrl_rZ_adl";
shadingNode -asUtility addDoubleLinear;
rename "addDoubleLinear1" "rt_index4_jnt_ctrl_rZ_adl";
connectAttr rt_fingerCurlAdjust_4_mdl.output rt_pinky4_jnt_ctrl_rZ_adl.input1;
connectAttr rt_fingerCurlAdjust_4_mdl.output rt_ring4_jnt_ctrl_rZ_adl.input1;
connectAttr rt_fingerCurlAdjust_4_mdl.output rt_middle4_jnt_ctrl_rZ_adl.input1;
connectAttr rt_fingerCurlAdjust_4_mdl.output rt_index4_jnt_ctrl_rZ_adl.input1;
connectAttr rt_armSwitches_ctrl.Pinky_D_Curl rt_pinky4_jnt_ctrl_rZ_adl.input2;
connectAttr rt_armSwitches_ctrl.Ring_D_Curl rt_ring4_jnt_ctrl_rZ_adl.input2;
connectAttr rt_armSwitches_ctrl.Index_D_Curl rt_index4_jnt_ctrl_rZ_adl.input2;
connectAttr rt_armSwitches_ctrl.Mid_D_Curl rt_middle4_jnt_ctrl_rZ_adl.input2;
connectAttr rt_pinky4_jnt_ctrl_rZ_adl.output  frzRt_pinky4_jnt_grp.rotateZ;
connectAttr rt_ring4_jnt_ctrl_rZ_adl.output  frzRt_ring4_jnt_grp.rotateZ;
connectAttr rt_middle4_jnt_ctrl_rZ_adl.output  frzRt_middle4_jnt_grp.rotateZ;
connectAttr rt_index4_jnt_ctrl_rZ_adl.output  frzRt_index4_jnt_grp.rotateZ;
setAttr "rt_armSwitches_ctrl.curlOffset_s3" 1.9;

addAttr -ln "thumbCurlOffsetS1"  -at double  -dv 0 rt_armSwitches_ctrl;
addAttr -ln "thumbCurlOffsetS2"  -at double  -dv 0 rt_armSwitches_ctrl;
addAttr -ln "thumbCurlOffsetS3"  -at double  -dv 0 rt_armSwitches_ctrl;
shadingNode -asUtility multDoubleLinear;
rename "multDoubleLinear1" "rt_thumbCurlAdjust_1_mdl";
shadingNode -asUtility multDoubleLinear;
rename "multDoubleLinear1" "rt_thumbCurlAdjust_2_mdl";
shadingNode -asUtility multDoubleLinear;
rename "multDoubleLinear1" "rt_thumbCurlAdjust_3_mdl";
connectAttr -f rt_armSwitches_ctrl.fullCurl rt_thumbCurlAdjust_1_mdl.input1;
connectAttr -f rt_armSwitches_ctrl.thumbCurlOffsetS1 rt_thumbCurlAdjust_1_mdl.input2;
connectAttr -f rt_thumbCurlAdjust_1_mdl.output rt_thumb1_jnt_ctrl_rZ_adl.input1;

connectAttr -f rt_armSwitches_ctrl.fullCurl rt_thumbCurlAdjust_2_mdl.input1;
connectAttr -f rt_armSwitches_ctrl.thumbCurlOffsetS2 rt_thumbCurlAdjust_2_mdl.input2;
connectAttr -f rt_thumbCurlAdjust_2_mdl.output rt_thumb2_jnt_ctrl_rZ_adl.input1;

connectAttr -f rt_armSwitches_ctrl.fullCurl rt_thumbCurlAdjust_3_mdl.input1;
connectAttr -f rt_armSwitches_ctrl.thumbCurlOffsetS3 rt_thumbCurlAdjust_3_mdl.input2;
connectAttr -f rt_thumbCurlAdjust_3_mdl.output rt_thumb3_jnt_ctrl_rZ_adl.input1;

setAttr -lock true "frzRt_pinky4_jnt_grp.rz";
setAttr -lock true "frzLt_index4_jnt_grp.rz";
setAttr -lock true "frzLt_middle4_jnt_grp.rz";
setAttr -lock true "frzLt_ring4_jnt_grp.rz";
setAttr -lock true "frzLt_pinky4_jnt_grp.rz";
setAttr -lock true "frzRt_index4_jnt_grp.rz";
setAttr -lock true "frzRt_middle4_jnt_grp.rz";
setAttr -lock true "frzRt_ring4_jnt_grp.rz";


print ("Completed : Finger D setup.\n");

// free hip

print ("Begins : Free Hip setup.\n");

select -r spineHips_jnt ;
source "wireShape.mel"; wireShape("circleX");
rename nurbsCircle1 freeHip_ctrl;
parent freeHip_ctrl spine1_jnt ;
parent spineHips_jnt freeHip_ctrl ;
select -r freeHip_ctrl ;
source "zeroOut.mel"; zeroOut("");
delete spineHips_jnt_parentConstraint1;
select -r hip_ctrl ;
select -add FreeHip_ctrl_offset ;
doCreateParentConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
parentConstraint -mo -weight 1;
setAttr -lock true -keyable false -channelBox false "freeHip_ctrl.sx";
setAttr -lock true -keyable false -channelBox false "freeHip_ctrl.sy";
setAttr -lock true -keyable false -channelBox false "freeHip_ctrl.sz";
setAttr -lock true -keyable false -channelBox false "freeHip_ctrl.v";
disconnectAttr makeNurbCircle2.outputCurve freeHip_ctrlShape.create;


print ("Completed : Free Hip setup.\n");

}
global proc selJointSet()

{

//create skinned joints sets
select -r lt_middle2_jnt lt_pinky1_jnt rt_LowerArm_2_JNT lt_UpperLeg_2_JNT lt_ring4_jnt lt_middle4_jnt lt_LowerLeg_3_JNT spineHips_jnt spine4_jnt lt_thumb2_jnt lt_index4_jnt lt_wrist_jnt rt_UpperArm_3_JNT rt_UpperArm_1_JNT lt_index2_jnt rt_pinky1_jnt rt_ring4_jnt rt_index4_jnt spineDef4_jnt rt_middle1_jnt rt_wrist_jnt rt_ring5_jnt rt_UpperLeg_2_JNT rt_pinky2_jnt rt_middle3_jnt spineDef5_jnt rt_ring3_jnt lt_UpperArm_3_JNT lt_ball_jnt lt_ankle_jnt rt_UpperArm_2_JNT lt_LowerArm_2_JNT spineDef3_jnt rt_LowerArm_3_JNT lt_UpperLeg_3_JNT spineDef2_jnt lt_pinky5_jnt lt_hip_jnt rt_ball_jnt neckDef1_jnt lt_ring2_jnt rt_thumb4_jnt rt_index1_jnt lt_middle3_jnt rt_thumb1_jnt rt_index3_jnt rt_hip_jnt Jaw_JNT head1_jnt lt_pinky2_jnt lt_shoulder_jnt1 lt_LowerLeg_2_JNT lt_pinky3_jnt lt_pinky4_jnt rt_LowerArm_1_JNT lt_LowerLeg_1_JNT lt_ring3_jnt rt_pinky5_jnt lt_UpperArm_2_JNT lt_index5_jnt lt_thumb3_jnt lt_thumb4_jnt rt_UpperLeg_1_JNT rt_LowerLeg_3_JNT lt_index3_jnt rt_middle2_jnt rt_index5_jnt rt_middle5_jnt lt_LowerArm_3_JNT lt_LowerArm_1_JNT rt_LowerLeg_1_JNT lt_index1_jnt lt_middle1_jnt rt_pinky3_jnt rt_ring2_jnt rt_UpperLeg_3_JNT rt_ring1_jnt rt_middle4_jnt lt_thumb1_jnt lt_UpperArm_1_JNT rt_pinky4_jnt lt_UpperLeg_1_JNT rt_LowerLeg_2_JNT rt_clav_jnt lt_ring5_jnt rt_ankle_jnt rt_shoulder_jnt1 lt_clav_jnt lt_middle5_jnt neckDef3_jnt rt_index2_jnt neckDef2_jnt lt_ring1_jnt rt_thumb3_jnt rt_thumb2_jnt ;
select -add spineDef6_jnt ;
select -add spineDef7_jnt ;
select -d neckDef3_jnt ;
$createSetResult = `sets -name "SkinJoints"`;

}





studio56RigTools;







