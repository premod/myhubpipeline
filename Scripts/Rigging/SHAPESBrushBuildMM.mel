// ----------------------------------------------------------------------------------------------
//
// SHAPESBrushBuildMM.mel
//
// marking menu for the SHAPES brush
//
// Ingo Clemens
// www.braverabbit.com
//
// copyright brave rabbit, Ingo Clemens 2014-2016
//
// brush version: 1.8
//
// ----------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------
//
// THE SOFTWARE PRODUCT IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR
// IMPLIED, INCLUDING, BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NON-INFRINGEMENT OF THIRD-PARTY RIGHTS. THE ENTIRE RISK AS TO THE QUALITY AND
// PERFORMANCE OF THE SOFTWARE PRODUCT IS WITH YOU.
// NEITHER BRAVE RABBIT NOR ITS SUPPLIERS WARRANT THAT THE FUNCTIONS CONTAINED IN THE SOFTWARE
// PRODUCT WILL MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE SOFTWARE PRODUCT WILL BE
// UNINTERRUPTED OR ERROR-FREE. BRAVE RABBIT IS NOT OBLIGATED TO PROVIDE ANY UPDATES TO THE
// SOFTWARE.
// IN NO EVENT SHALL THE AUTHOR OF THIS SOFTWARE PRODUCT BE LIABLE FOR ANY SPECIAL, CONSEQUENTIAL,
// INCIDENTAL, DIRECT OR INDIRECT DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR
// LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, FOR PERSONAL INJURY, LOSS OF BUSINESS
// INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THIS
// PRODUCT, EVEN IF THE AUTHOR OF THIS SOFTWARE PRODUCT IS AWARE OF THE POSSIBILITY OF SUCH
// DAMAGES AND KNOWN DEFECTS, ANY CLAIM BY A THIRD PARTY AND EVEN IF THE REMEDY FAILS OF ITS
// ESSENTIAL PURPOSE.
//
// ----------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------
//
// assign the marking menu to a hotkey by executing the following command:
//
// source SHAPESBrushBuildMM;
// SHAPESBrush_setupMM;
//
// ----------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------
//
// setup the marking menu
//
//----------------------------------------------------------------------------------------------

global proc int SHAPESBrushGetMayaVersion()
{
	int $version = `about -apiVersion`;
	$version /= 100.0;
	return $version;
}

global proc SHAPESBrush_setupMM()
{
	string $win = "SHAPESBrushHotkeyWindow";
	if (`window -ex $win`)
		deleteUI $win;
	
	window -t "" -w 186 -h 117 $win;
	
	if (`windowPref -ex $win`)
		windowPref -e -w 186 -h 117 $win;
	
	int $state = 0;
	if (`SHAPESBrushGetMayaVersion` >= 2016)
		$state = 1;
	
	rowColumnLayout;
		separator -st "none" -h 10;
		text -l "Enter the hotkey\nfor the marking menu" -al "center";
		SHAPESBrushCreateHotkeySetOption;
		separator -st "none" -h 10;
		textFieldGrp -l "Key" -cw2 30 100 -ct2 "right" "left" -co2 0 5 sbMMHotkeyField;
		rowLayout -nc 3;
			checkBoxGrp -l "Shift" -cw2 30 20 -ct2 "right" "left" -co2 0 5 -m $state sbMMShiftCheck;
			checkBoxGrp -l "Ctrl" -cw2 30 20 -ct2 "right" "left" -co2 0 5 sbMMCtrlCheck;
			checkBoxGrp -l "Alt" -cw2 25 20 -ct2 "right" "left" -co2 0 5 sbMMAltCheck;
		setParent ..;
		separator -st "none" -h 10;
		rowLayout -nc 2;
			button -l "OK" -w 100 -c ("SHAPESBrushCreateMMHotkey " + $win);
			button -l "Cancel" -w 100 -c ("deleteUI " + $win);
		setParent ..;
	setParent ..;
	
	showWindow $win;
}

global proc SHAPESBrushCreateHotkeySetOption()
{
	if (`SHAPESBrushGetMayaVersion` < 2016)
		return;
	
	string $keySets[] = `hotkeySet -q -hsa`;
	int $default = -1;
	for ($i = 0; $i < size($keySets); $i ++)
	{
		if ($keySets[$i] == "Maya_Default")
			$default = $i;
	}
	if ($default != -1)
		stringArrayRemoveAtIndex($default, $keySets);
	
	separator -st "none" -h 10;
	optionMenuGrp -l "Set" -cw2 30 100 -ct2 "right" "left" -co2 0 5 sbMMHotkeySetOption;
	menuItem -l "Create New";
	for ($ks in $keySets)
		menuItem -l $ks;
}

global proc SHAPESBrushCreateMMHotkey( string $win )
{
	if (`SHAPESBrushGetMayaVersion` >= 2016)
	{
		string $keySet = `optionMenuGrp -q -v sbMMHotkeySetOption`;
		if ($keySet == "Create New")
		{
			if (`hotkeySet -q -ex "Maya_Default_SHAPES"`)
				hotkeySet -e -del "Maya_Default_SHAPES";
			hotkeySet -cu "Maya_Default_SHAPES";
		}
		else
		{
			hotkeySet -e -cu $keySet;
		}
	}
	
	string $key = `textFieldGrp -q -tx sbMMHotkeyField`;
	int $shiftMod = `checkBoxGrp -q -v1 sbMMShiftCheck`;
	int $ctrlMod = `checkBoxGrp -q -v1 sbMMCtrlCheck`;
	int $altMod = `checkBoxGrp -q -v1 sbMMAltCheck`;
	
	if (`runTimeCommand -q -ex SHAPESBrushMMCommand`)
		runTimeCommand -e -del SHAPESBrushMMCommand;
	if (`runTimeCommand -q -ex SHAPESBrushMMPopDownCommand`)
		runTimeCommand -e -del SHAPESBrushMMPopDownCommand;
	
	runTimeCommand	-annotation "Open the SHAPES Brush marking menu"
					-category "User"
					-command ("SHAPESBrushDefaultTool; SHAPESBrushBuildMM;")
					SHAPESBrushMMCommand;

	runTimeCommand	-annotation "Close the SHAPES Brush marking menu"
					-category "User"
					-command ("MarkingMenuPopDown")
					SHAPESBrushMMPopDownCommand;
	
	nameCommand -ann "SHAPESBrushMM" -c ("SHAPESBrushMMCommand") SHAPESBrushMM_NameCommand;
	nameCommand -ann "SHAPESBrushMMPopDown" -c ("SHAPESBrushMMPopDownCommand") SHAPESBrushMMPopDown_NameCommand;
	
	string $cmd = "hotkey -k \"" + $key + "\"";
	if ($shiftMod == 1 && `SHAPESBrushGetMayaVersion` >= 2016)
		$cmd += " -sht";
	if ($ctrlMod == 1)
		$cmd += " -ctl";
	if ($altMod == 1)
		$cmd += " -alt";
	string $cmdRelease = $cmd + " -releaseName (\"SHAPESBrushMMPopDown_NameCommand\")";
	$cmd += " -name (\"SHAPESBrushMM_NameCommand\")";
	eval($cmd);
	eval($cmdRelease);
	
	SHAPESBrushGetMMHotkey 1;
	
	deleteUI $win;
}

global proc SHAPESBrushDeleteMMHotkey()
{
	if (`runTimeCommand -ex "SHAPESBrushMMCommand"`)
	{
		int $ids = `assignCommand -q -num`;
		for ($i = 1; $i < $ids; $i ++)
		{
			string $cmd = `assignCommand -q -c $i`;
			if (`gmatch $cmd "SHAPESBrushMM*"`)
			{
				string $keyArray[] = `assignCommand -q -keyArray $i`;
				hotkey -keyShortcut $keyArray[0] -name "";
				hotkey -keyShortcut $keyArray[0] -releaseName "";
			}
			
			$cmd = `assignCommand -q -n $i`;
			if (`gmatch $cmd "SHAPESBrushMM*"`)
			{
				assignCommand -e -d $i;
			}
		}
		runTimeCommand -e -del SHAPESBrushMMCommand;
		runTimeCommand -e -del SHAPESBrushMMPopDownCommand;
		
		optionVar -rm SHAPESBrushHotkey;
	}
}

global proc string SHAPESBrushGetMMHotkey( int $forceUpdate )
{
	if (!`runTimeCommand -q -ex SHAPESBrushMMCommand`)
		return "";
	
	if (`optionVar -ex SHAPESBrushHotkey` && $forceUpdate == 0)
	{
		if (`optionVar -q SHAPESBrushHotkey` != "" && `optionVar -q SHAPESBrushHotkey` != "NONE")
			return `optionVar -q SHAPESBrushHotkey`;
	}
	
	string $key[];
	int $count = `assignCommand -q -num`;
	for ($c = 1; $c <= $count; $c ++)
	{
		string $name = `assignCommand -q -n $c`;
		if ($name == "SHAPESBrushMM_NameCommand")
		{
			$key = `assignCommand -q -k $c`;
			optionVar -sv SHAPESBrushHotkey $key[0];
		}
	}
	return $key[0];
}

global proc string SHAPESBrushBuildMenuCmd()
{
	string $key = "";
	// check if SHAPES is present or if it's the standalone brush plugin
	if (`exists SHAPES_getHotkey`)
		$key = SHAPES_getHotkey("brush", 0);
	else
		$key = SHAPESBrushGetMMHotkey(0);
	if ($key == "")
		return $key;
	
	string $cmd = "popupMenu -mm 1 -b 1 ";
	
	if (`gmatch $key "*Shift*"`)
		$cmd += "-sh 1 ";
	if (`gmatch $key "*Ctrl*"`)
		$cmd += "-ctl 1 ";
	if (`gmatch $key "*Alt*"`)
		$cmd += "-alt 1 ";
	
	$cmd += "-aob 1 -p viewPanes tempMM";
	
	return $cmd;
}

global proc SHAPESBrushDefaultTool()
{
	if (!`pluginInfo -q -l SHAPESBrush`)
	{
		loadPlugin SHAPESBrush;
		
		// source the properties script;
		// usually this is not necessary since it's tied to the context
		// but SHAPESBrushDefaultTool is called from the marking menu hotkey
		// followed by building the marking menu (which refers to the properties content);
		// calling the marking menu seems to be faster than connecting to the properties
		// so the properties are force-sourced here;
		// could do it with evalDeferred() in the hotkey command but since the hotkey
		// assignment exists in user setups already this workaround is easier
		source SHAPESBrushProperties;
	}
	
	SHAPESBrushToolCtx;
	SHAPESBrushContext -e -t 0 SHAPESBrushContext1;
}

//----------------------------------------------------------------------------------------------
//
// build the marking menu
//
//----------------------------------------------------------------------------------------------

global proc SHAPESBrushBuildMM()
{
	int $val;
	int $toolSettings = 0;
	if (`columnLayout -ex SHAPESBrush`)
		$toolSettings = 1;
	
	SHAPESBrushToolCtx;
	
	if (`popupMenu -ex tempMM`) deleteUI tempMM;
	
	string $cmd = `SHAPESBrushBuildMenuCmd`;
	if ($cmd == "")
		error "Error reading the SHAPES Brush marking menu hotkey. Please re-assign the hotkey.";
	
	eval($cmd);

	menuItem
	-label "Grab and Slide"
	-command ("setToolTo SHAPESBrushContext1; if (" + $toolSettings + " == 1) sbPropertiesSetSymbolCheckBox 0 sbBrushColumn; else SHAPESBrushContext -e -t 0 SHAPESBrushContext1;")
	-radialPosition "W";

	menuItem
	-label "Grab and Pull"
	-command ("setToolTo SHAPESBrushContext1; if (" + $toolSettings + " == 1) sbPropertiesSetSymbolCheckBox 1 sbBrushColumn; else SHAPESBrushContext -e -t 1 SHAPESBrushContext1;")
	-radialPosition "NW";
	
	menuItem
	-label "Grab and Blend"
	-command ("setToolTo SHAPESBrushContext1; if (" + $toolSettings + " == 1) sbPropertiesSetSymbolCheckBox 2 sbBrushColumn; else SHAPESBrushContext -e -t 2 SHAPESBrushContext1;")
	-radialPosition "NE";
	
	menuItem
	-label "Grab and Erase"
	-command ("setToolTo SHAPESBrushContext1; if (" + $toolSettings + " == 1) sbPropertiesSetSymbolCheckBox 3 sbBrushColumn; else SHAPESBrushContext -e -t 3 SHAPESBrushContext1;")
	-radialPosition "E";
	
	menuItem
	-label "Paint Freeze"
	-command ("sbPropertiesPaintFreeze; if (" + $toolSettings + " == 1) sbPropertiesSetSymbolCheckBox 4 sbBrushColumn;")
	-radialPosition "SW";
	
	menuItem
	-label "Erase Freeze"
	-command ("sbPropertiesEraseFreeze; if (" + $toolSettings + " == 1) sbPropertiesSetSymbolCheckBox 5 sbBrushColumn;")
	-radialPosition "SE";
	
	menuItem
	-label "Relax"
	-command ("SHAPESBrushContext -e -r #1 SHAPESBrushContext1; if (" + $toolSettings + " == 1) checkBoxGrp -e -v1 #1 sbSmoothRelaxCheck;")
	-cb `SHAPESBrushContext -q -r SHAPESBrushContext1`
	-radialPosition "N";
	
	menuItem
	-label "Invert Freeze"
	-command ("SHAPESBrushContext -e -if #1 SHAPESBrushContext1; if (" + $toolSettings + " == 1) checkBox -e -v #1 sbInvertFreezeCheck;")
	-cb `SHAPESBrushContext -q -if SHAPESBrushContext1`
	-radialPosition "S";
	
	//
	// lower gestural menu
	//
	
	menuItem
	-label "Un-Freeze"
	-command "sbPropertiesDeleteFreeze";
	
	menuItem -divider 1;
	
	$val = `SHAPESBrushContext -q -sym SHAPESBrushContext1`;
	int $axisList[] = {0, 0, 0, 0};
	$axisList[$val] = 1;
	
	int $active = 0;
	if ($val > 0)
		$active = 1;
	
	menuItem
	-label "Symmetry" 
	-cb $active
	-c ("SHAPESBrushContext -e -sym (`sbPropertiesGetSymmetryAxis #1`) SHAPESBrushContext1; if (" + $toolSettings + " == 1) checkBoxGrp	-e -v1 #1 sbSymmetryCheck;");
		
	menuItem
	-label "Axis"
	-en $active
	-sm 1;
		
		radioMenuItemCollection;
		
		menuItem
		-label "X Axis"
		-rb $axisList[1]
		-c ("SHAPESBrushContext -e -sym 1 SHAPESBrushContext1; if (" + $toolSettings + " == 1) sbPropertiesSetSymmetryAxis 1;");
		
		menuItem
		-label "Y Axis"
		-rb $axisList[2]
		-c ("SHAPESBrushContext -e -sym 2 SHAPESBrushContext1; if (" + $toolSettings + " == 1) sbPropertiesSetSymmetryAxis 2;");
		
		menuItem
		-label "Z Axis"
		-rb $axisList[3]
		-c ("SHAPESBrushContext -e -sym 3 SHAPESBrushContext1; if (" + $toolSettings + " == 1) sbPropertiesSetSymmetryAxis 3;");
	
		setParent -m ..;
	
	menuItem
	-label "Use Plane"
	-command ("sbPropertiesUsePlaneAngle; if (" + $toolSettings + " == 1) checkBox -e -v #1 sbUsePlaneCheck;")
	-cb (`sbPropertiesGetUsePlaneState`);
	
	menuItem -divider 1;
	
	menuItem
	-label "Increase Depth"
	-command "sbPropertiesSetDepth 1";
	
	menuItem
	-label "Decrease Depth"
	-command "sbPropertiesSetDepth -1";
	
	menuItem
	-label ("Depth: " + `SHAPESBrushContext -q -d SHAPESBrushContext1`)
	-en 0;
	
	menuItem -divider 1;
	
	menuItem
	-label "Surface Falloff"
	-command ("SHAPESBrushContext -e -f #1 SHAPESBrushContext1; if (" + $toolSettings + " == 1) checkBoxGrp -e -v1 #1 sbFalloffCheck;")
	-cb `SHAPESBrushContext -q -f SHAPESBrushContext1`;
	
	menuItem
	-label "Curve"
	-sm 1;
		
		$val = `SHAPESBrushContext -q -c SHAPESBrushContext1`;
		int $valueList[] = {0, 0, 0, 0, 0, 0};
		$valueList[$val] = 1;
		
		radioMenuItemCollection;
		
		menuItem
		-label "Linear"
		-rb $valueList[0]
		-c ("if (" + $toolSettings + " == 1) sbPropertiesSetSymbolCheckBox 0 sbCurveColumn; else SHAPESBrushContext -e -c 0 SHAPESBrushContext1");
		
		menuItem
		-label "Soft"
		-rb $valueList[1]
		-c ("if (" + $toolSettings + " == 1) sbPropertiesSetSymbolCheckBox 1 sbCurveColumn; else SHAPESBrushContext -e -c 1 SHAPESBrushContext1");
		
		menuItem
		-label "Wide"
		-rb $valueList[2]
		-c ("if (" + $toolSettings + " == 1) sbPropertiesSetSymbolCheckBox 2 sbCurveColumn; else SHAPESBrushContext -e -c 2 SHAPESBrushContext1");
		
		menuItem
		-label "Narrow"
		-rb $valueList[3]
		-c ("if (" + $toolSettings + " == 1) sbPropertiesSetSymbolCheckBox 3 sbCurveColumn; else SHAPESBrushContext -e -c 3 SHAPESBrushContext1");
		
		menuItem
		-label "Smooth 1"
		-rb $valueList[4]
		-c ("if (" + $toolSettings + " == 1) sbPropertiesSetSymbolCheckBox 4 sbCurveColumn; else SHAPESBrushContext -e -c 4 SHAPESBrushContext1");
		
		menuItem
		-label "Smooth 2"
		-rb $valueList[5]
		-c ("if (" + $toolSettings + " == 1) sbPropertiesSetSymbolCheckBox 5 sbCurveColumn; else SHAPESBrushContext -e -c 5 SHAPESBrushContext1");
		
		setParent -m ..;
	
	menuItem -divider 1;
	
	sbPropertiesAddBlendMeshSubmenu tempMM;
	
	menuItem -divider 1;
	
	menuItem
	-label "Settings"
	-sm 1;
	
	menuItem
	-label "Flood Erase"
	-command ("SHAPESBrushContext -e -fc 2 SHAPESBrushContext1;");
	
	menuItem
	-label "Flush Cache"
	-command ("SHAPESBrushContext -e -fc 1 SHAPESBrushContext1;");
	
	menuItem -divider 1;
	
	int $displayWireframe = 1;
	string $wireString = "none";
	if (`displayPref -q -wsa` == "none")
	{
		$displayWireframe = 0;
		$wireString = "full";
	}
	
	menuItem
	-label "Show Wireframe"
	-command ("displayPref -wsa \"" + $wireString + "\"; if (" + $toolSettings + " == 1) checkBoxGrp -e -v1 #1 sbShowWireframeCheck;")
	-cb $displayWireframe;
	
	menuItem
	-label "Show Brush Circle"
	-command ("SHAPESBrushContext -e -dc #1 SHAPESBrushContext1; if (" + $toolSettings + " == 1) checkBoxGrp -e -v1 #1 sbShowCircleCheck;")
	-cb `SHAPESBrushContext -q -dc SHAPESBrushContext1`;
	
	menuItem
	-label "Ignore History Warning"
	-command ("optionVar -iv SHAPESIgnoreBrushHistoryWarning #1; if (" + $toolSettings + " == 1) checkBoxGrp -e -v1 #1 sbIgnoreHistoryCheck;")
	-cb `optionVar -q SHAPESIgnoreBrushHistoryWarning`;
	
	menuItem
	-label "Set Plane Angle..."
	-command ("sbPropertiesSetPlaneAngle");
	
	menuItem
	-label "Step Size"
	-sm 1;
	
		menuItem
		-label "Fine"
		-command ("SHAPESBrushContext -e -sst 0.01 SHAPESBrushContext1; if (" + $toolSettings + " == 1) checkBoxGrp -e -v1 0 sbLargeValueStepsCheck;");
	
		menuItem
		-label "Coarse"
		-command ("SHAPESBrushContext -e -sst 0.1 SHAPESBrushContext1; if (" + $toolSettings + " == 1) checkBoxGrp -e -v1 1 sbLargeValueStepsCheck;");
	
		setParent -m ..;
	
	setParent -m ..;
	
	setParent -m ..;
}
