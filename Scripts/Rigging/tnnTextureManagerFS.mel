global proc tnnTextureManagerFS()
{
	if( (`window -exists textureManWinFS`) == true ){deleteUI textureManWinFS;}
	window -widthHeight 313 450 -t "TNN Texture Manager                  Sanraa Media..." -s 0 -mb true textureManWinFS;
	menu -l " Item List ";
	menuItem -l "CHARS"  -c referCharsShaderFS forRefChars;
	//menuItem -l "SETS" -c referSetsShaderFS forRefSets;
	menuItem -l "PROPS" -c referPropsShaderFS forRefProps;
	
	string $form = `formLayout`;
	string $tabs = `tabLayout -innerMarginWidth 5 -innerMarginHeight 5 refShadersFS`;
	formLayout -edit
	     -attachForm $tabs "top"    0
	     -attachForm $tabs "left"   0
	     -attachForm $tabs "bottom" 0
	     -attachForm $tabs "right"  0
	     $form;
	
	string $child = `columnLayout -adj true DEFAULT`;
		textScrollList -ams false -fn "fixedWidthFont" -h 313 propslistDefaultFS;
		button -h 25 -bgc 0.6 0.6 0.6 -l "Assign Shader To Selected Asset" -c getSelectedDefaultFS;
		button  -h 25 -l "Refresh List";
       setParent ..;

	 string $child5 = `columnLayout -adj true LOWRES`;
		textScrollList -ams false  -fn "fixedWidthFont" -h 313 propslistLowresFS;	
		button -h 25 -bgc 0.6 0.6 0.6 -l "Assign Shader To Selected Asset" -c getSelectedDefaultFS;
		button  -h 25 -l "Refresh List";
      	setParent ..;

	string $smot = `columnLayout -adj true SMOOTH`;
		textScrollList -ams false  -fn "fixedWidthFont" -h 313 propslistSmoot;	
		button -h 25 -bgc 0.5 0.7 0.9 -l "Assign &Smooth To Selected Asset" -c getSelectedSmooth;
		button  -h 25 -l "Refresh List";
      	setParent ..;

	string $unSmot = `columnLayout -adj true UNSMOOTH`;
		textScrollList -ams false  -fn "fixedWidthFont" -h 313 propslistUnSmoot;	
		button -h 25 -bgc 0.5 0.7 0.9 -l "Un Smooth Selected Asset" -c getSelectedUnSmooth;
		button  -h 25 -l "Refresh List";
      	setParent ..;

	tabLayout -edit -tabLabel $child "DEFAULT" -tabLabel $child5 "LOWRES" -tabLabel $smot "SMOOTH" -tabLabel $unSmot "UNSMOOTH" $tabs ;
	
 showWindow;
}

global proc referCharsShaderFS()
{
	textScrollList -e -ra propslistDefaultFS;
	textScrollList -e -ra propslistLowresFS;
	textScrollList -e -ra propslistSmoot;
	textScrollList -e -ra propslistUnSmoot;
	string $refNodes[] = `file -q -r`;
	string $buffer[];
	for($r in $refNodes)
	{ 
		$numTokens = `tokenize $r "/" $buffer`;
		if(($buffer[5] == "CHARACTERS") || ($buffer[6] == "CHARACTERS"))
		{
			string $name = basenameEx($r);
			int $val = endsWith($name, "_SHA");
			if($val == "0")
			{
				textScrollList -e -append $name propslistDefaultFS;
				textScrollList -e -append $name propslistLowresFS;
				textScrollList -e -append $name propslistSmoot;
				textScrollList -e -append $name propslistUnSmoot;
			}
		}	
	}
} 

global proc referSetsShaderFS()
{
	textScrollList -e -ra propslistDefaultFS;
	textScrollList -e -ra propslistLowresFS;
	textScrollList -e -ra propslistSmoot;
	textScrollList -e -ra propslistUnSmoot;
	string $refNodes[] = `file -q -r`;
	string $buffer[];
	for($r in $refNodes)
	{ 
		$numTokens = `tokenize $r "/" $buffer`;
		if(($buffer[5] == "SETS") || ($buffer[6] == "SETS"))
		{
			string $name = basenameEx($r);
			int $val = endsWith($name, "_SHA");
			if($val == "0")
			{
				textScrollList -e -append $name propslistDefaultFS;
				textScrollList -e -append $name propslistLowresFS;
				textScrollList -e -append $name propslistSmoot;
				textScrollList -e -append $name propslistUnSmoot;
			}
		}
	}
} 

global proc referPropsShaderFS()
{
	textScrollList -e -ra propslistDefaultFS;
	textScrollList -e -ra propslistLowresFS;
	textScrollList -e -ra propslistSmoot;
	textScrollList -e -ra propslistUnSmoot;
	string $refNodes[] = `file -q -r`;
	string $buffer[];
	for($r in $refNodes)
	{ 
		$numTokens = `tokenize $r "/" $buffer`;
		if(($buffer[5] == "PROPS") || ($buffer[6] == "PROPS"))
		{
			string $name = basenameEx($r);
			int $val = endsWith($name, "_SHA");
			if($val == "0")
			{
				textScrollList -e -append $name propslistDefaultFS;
				textScrollList -e -append $name propslistLowresFS;
				textScrollList -e -append $name propslistSmoot;
				textScrollList -e -append $name propslistUnSmoot;
			}
		}
	}
} 

global proc getSelectedDefaultFS()
{
	string $chars = `menuItem -q -l forRefChars`;
	//string $sets = `menuItem -q -l forRefSets`;
	string $props = `menuItem -q -l forRefProps`;

	string $defaultList[] = `textScrollList -q -si propslistDefaultFS`;
	string $lowresList[] = `textScrollList -q -si propslistLowresFS`;
	string $shaderType = `tabLayout -q -st refShadersFS`;

	textScrollList -e -da propslistDefaultFS;
	textScrollList -e -da propslistLowresFS;
	
	string $refNodes[] = `file -q -r`;
	for($r in $refNodes)
	{ 
		string $buffer[];
		$numTokens = `tokenize $r "/" $buffer`;
		string $fName = basenameEx($r);
		if(($defaultList[0] == $fName) && ($shaderType == "DEFAULT"))
		{
			dConnectAttruburesLighting();
			select ($fName+"*:World");
			hyperShade -assign initialShadingGroup;
			select -cl;	
			string $ns[];
			$numTokens = `tokenize $defaultList[0] "." $ns`;
			string $nameSpace = `namespace -ex ($ns[0]+"_SHA")`;
			file -rr ("Q:/TNN/04_PRODUCTION/REFERENCES/"+$buffer[4]+"/"+$buffer[5]+"/COMMON_SHADERS/"+$ns[0]+"_SHA"+".ma");
		}
		else if(($lowresList[0] == $fName) && ($shaderType == "LOWRES"))
		{
			string $ns[];
			$numTokens = `tokenize $lowresList[0] "." $ns`;
			string $nameSpace = `namespace -ex ($ns[0]+"_SHA")`;
			if($nameSpace == "1")
			{
				warning "Already Loaded.Please Check Reference Editor.";
				assignShaderInfoFS($lowresList[0]);
			}
			else if($nameSpace == "0")
			{
				string $path = `file -r -ns ($ns[0]+"_SHA") ("Q:/TNN/04_PRODUCTION/REFERENCES/"+$buffer[4]+"/"+$buffer[5]+"/COMMON_SHADERS/"+$ns[0]+"_SHA"+".ma")`;
				assignShaderInfoFS($lowresList[0]);
			}
		}	
	}
}

global proc getSelectedSmooth()
{
	string $smootList[] = `textScrollList -q -si propslistSmoot`;
	textScrollList -e -da propslistSmoot;
	textScrollList -e -da propslistUnSmoot;
	select ($smootList[0]+"*:World");
	SelectAllPolygonGeometry;
	string $lst[] = `ls -sl`;
	for($each in $lst)
	{
		int $val = startsWith($each,$smootList[0]);
		int $vis = getAttr ($each+".visibility");
		if($val == "0" || $vis == "0")
		{
			select -d $each;
		}
	}
	
	string $list[] = `ls -sl`;
	for($a in $list)
	{
		string $smtName[] = `polySmooth $a`;
		rename $smtName[0] ($smootList[0]+"_"+$smtName[0]);
	}
}

global proc getSelectedUnSmooth()
{
	/*string $smootList[] = `textScrollList -q -si propslistSmoot`;
	textScrollList -e -da propslistSmoot;
	textScrollList -e -da propslistUnSmoot;
	string $smtNode[] = `ls -typ "polySmoothFace"`;
	for($node in $smtNode)
	{
		string $mat = `match ($smootList[0]+"_") $node`;
		if(`size($mat)` == "1")
		{
			setAttr ($node+".divisions") 0;
		}
	}*/

	string $smootList[] = `textScrollList -q -si propslistSmoot`;
	string $smootList[] = `textScrollList -q -si propslistUnSmoot`;
	textScrollList -e -da propslistSmoot;
	textScrollList -e -da propslistUnSmoot;
	string $smtNode[] = `ls -typ "polySmoothFace"`;
	for($node in $smtNode)
	{
		string $mat = `match ($smootList[0]+"_") $node`;
		if(`size($mat)` == "1")
		{
			delete $node;
		}
	}
}

global proc assignShaderInfoFS(string $assignChar)
{
	dConnectAttruburesLighting();
	catch (`modelEditor -edit -displayAppearance boundingBox modelPanel4`);
	catch (`modelEditor -edit -displayAppearance boundingBox modelPanel2`);
	catch (`modelEditor -edit -displayAppearance boundingBox modelPanel3`);
	catch (`modelEditor -edit -displayAppearance boundingBox modelPanel1`);
	string $default[] = {"lambert1","particleCloud1"};
	string $lowresList = $assignChar;
	string $ns[];
	$numTokens = `tokenize $lowresList "_" $ns`;
	string $mat[] = `ls -typ "shadingEngine"`;
	string $final[] = stringArrayRemove($default, $mat);
	for($i=0; $i<size($final); $i++)
	{
		int $val = startsWith($final[$i],$ns[0]);
		if($val == "1")
		{
			select -r $final[$i];
			hyperShade -objects "";
			string $attr[] = `listAttr -l $final[$i]`;
			for($j=0; $j<size($attr); $j++)
			{
				string $name = getAttr ($final[$i]+"."+"Assigned"+$j);
				string $shaderName[] = `ls -r 1 ("*:"+$name)`;
				for($k=0; $k<size($shaderName); $k++)
				{
					catch(`select -tgl ($shaderName[$k])`);
					catch(`sets -e -forceElement $final[$i]`);
				}
			}
		select -cl;
		}
	}
	dConnectAttruburesLighting();
	print "Assigned Successfully"; 
}
